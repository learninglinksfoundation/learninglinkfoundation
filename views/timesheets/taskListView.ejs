<% include ../partials/navbar %>
<% include ../partials/footer %>
<% include ../partials/messages %>

<link rel="stylesheet" href="/stylesheets/table-sortable.css">
<script src="/scripts/table-sortable.js" ></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<!-- / -->

<style>
.tab {
  overflow: hidden;
  border: 1px solid #ccc;
  background-color: #f1f1f1;
}

.tab button {
  background-color: inherit;
  float: left;
  border: none;
  outline: none;
  cursor: pointer;
  padding: 15px 25px;
  transition: 0.3s;
  font-size: 17px;
}


.tab button:hover {
  background-color: #ddd;
}


.tab button.active {
  background-color: #ccc;
}

.tabcontent {
  display: none;
  padding: 6px 12px;
  border: 1px solid #ccc;
  border-top: none;
}

</style>



<h3 style="text-align: center; margin-top: 20px;">Tasks </h3>
<div class="container">
<div class="row mt-5 mb-3 align-items-center">
    <div class="col-md-1">
      <a  href="/timesheets/taskListView" style="color: #555;" id="ref" ><i class="fa fa-refresh" style="font-size:34px; margin-left: 10px; "></i> </a>
    </div>
    <div class="col-md-3">
      <button type="button" class="btn btn-primary" id="deleteSelected" disabled > Delete Selected Records </button>
    </div>
    <div class="col-md-2">
      <select class="form-control" id="ListViewSelect"> 
        <option value="mytask" >My Tasks</option>  
        <% if(objUser.isManager) { %>
          <option value="teamtask">My Team Tasks</option>
        <% } %> 
      </select>
    </div>
    <div class="col-md-3">
      <input type="text" class="form-control" placeholder="Search by Task" id="searchField" >
    </div>
    <div class="col-md-2 text-right">
    <span class="pr-2">Rows Per Page:</span>
    </div>
    <div class="col-md-1">
        <div class="d-flex justify-content-end">
            <select class="custom-select" name="rowsPerPage" id="changeRows">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="15" selected>15</option>
            </select>
        </div>
    </div>
</div>

<div id="tasklListTable" class="responsive " style="overflow-x: auto;">

</div>

</div>


  <div id="taskViewModal" class="modal fade">
  <div class="modal-dialog modal-lg" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" style="align-items: center;">Timesheet Task Details</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">&times;</span> </button>
      </div>
      <div class="modal-body">
        <div class="tab">
          <button class="tablinks active" onclick="handleTabs(event, 'detail')">Details</button>
          <button class="tablinks" onclick="handleTabs(event, 'related')">Related List</button>
        </div>



        <div id="detail" style="display:block" class="tabcontent">
          <div id="detailLoadingSpinner">
            <center> <img src="/spinner-gif-transparent-background-14.gif" /> </center>
          </div>
          <table id="taskViewTable" class="table"> </table>
        </div>
        <div id="related" class="tabcontent" >
          
          <table class="table" style="text-align: center;">
            <thead class="thead-light">
              <tr>
                <th>SR No </th>
                <th> Action </th>
                <th> Name </th>
                <th> Task Name </th>
                <th> Start Time </th>
                <th> End Time </th>
                <th> Description</th>
                <th> Hours </th>
              </tr>
            </thead>
            <tbody id="timeTableBody"> </tbody>
          </table>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>








<div id="taskEditModal" class="modal fade ">
    <div class="modal-dialog" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title">Task Edit Form</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
      
        <div class="modal-body" id="editModalBody" >
            <form name="editTaskForm" id="editTaskForm" >
             <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                      <label for="tskName">Name</label>
                      <input type="text" disabled class="form-control" id="tskName" value=""   name="tskName" required>
                    </div>
                    
                    <div class="col-md-6">
                    <label for="assigneTo">Assigneed Resuroce</label>
                    <input type="text" disabled class="form-control" id="assigneTo" value=""   name="assigneTo" required>
                   </option>
                      </select>
                    </div>
                </div>
              </div>
              

              <div class="form-group">
                <div class="row">            
                  <div class="col-md-6">
                    <label for="start">Start Time</label>
                      <input type="text" class="form-control" id="start" value=""   name="start" >
                    </div>

                  <div class="col-md-6">
                      <label for="endTime">EndTime</label>
                      <input type="text" class="form-control" id="endTime" value=""   name="endTime" >
                      </div>
                </div>
                <div class="form-group">
                    <div class="row">            
                      <div class="col-md-6">
                        <label for="taskType">Task Type</label><br>
                        <select name="taskType" id="taskType" style="height: 45px;width:214px;">
                          <option value="">Choose Task Type</option>
                          <option value="A">A</option>
                          <option value="B">B</option>
                          <option value="C">C</option>
                          <option value="D">D</option>
                        </select>
                      </div>
  
                      <div class="col-md-6">
                          <label for="hrs">Planned Hours</label>
                          <input type="number" disabled class="form-control" id="hrs" value=""   name="hrs" />
                          </div>
                    </div>
              </div>
              <div class="form-group">
                <div class="row">            
                    <div class="col-md-6">
                       <input type="hidden" class="form-control" id="hide" value=""  name="hide" />
                      </div>
            </div>
            
              
              <div class="modal-footer">
                  <button type="submit" class="btn btn-primary" id="editTaskButton" data-dismiss="modal">Save</button>
                  <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
              </div>
            </form>
          </div>
       
  </div>
</div>
<!-- / -->


<script>

    function handleTabs(evt, tabName) {
      var i, tabcontent, tablinks;
      tabcontent = document.getElementsByClassName("tabcontent");
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "none";
      }
      tablinks = document.getElementsByClassName("tablinks");
      for (i = 0; i < tablinks.length; i++) {
        tablinks[i].className = tablinks[i].className.replace(" active", "");
      }
      document.getElementById(tabName).style.display = "block";
      evt.currentTarget.className += " active";
    }


    $(document).ready(function() { 

       
        let columns ={
            sequence : 'Sequence',
            Checkbox : '<input style="height: 14px;width: 14px;" type="checkbox" id="mainCheckBox"/>',
            deleteAction: 'Action',
           // editAction:'Action',
            name: 'Task ',
             assigned:'Assigned Resource',
             hrs:'Planned Hours',
             plandate:'Planned Start Date',
            startTime:'Start Time',
            endtime:'End Time',
            taskType:'Task Type',
            createdByName:'Task Assigned By',
            createDdate : 'Created Date',

        }

        let jt = <%- JSON.stringify(objUser) %>;
        if(jt.isManager){
          $('#ListViewSelect').prop('disabled',false);
        }
        else{
          $('#ListViewSelect').prop('disabled',true);
        }
      window.setTimeout(function(){
          const url = new URLSearchParams(window.location.search);
          let id = url.get('id');
          let isOpen = url.get('isOpen');
          console.log(isOpen,id);
          if(id && isOpen === 'true'){
              console.log('done');
              handleTableData(id);
              
          }
      },1000);


      

      var table = $('#tasklListTable').tableSortable({
        data :[],
        columns,
        searchField: '#searchField',
        sorting: true,
        rowsPerPage: 15,
        pagination:true,
        sorting: ['sequence','createDdate'],
        tableWillMount: () => {
            console.log('table will mount')
            
        },
        tableDidMount: () => {
            console.log('table did mount');

            $('#spinner').hide();
        },
        tableWillUpdate: () => {
            console.log('table will update')
        //  table.refresh();
        // onLoadTask();
        },
        tableDidUpdate: () => {
        console.log('table did update');
         anchorClickFunctionalities();
         additionaldeleteFunctionality();
        },
        tableWillUnmount: () => console.log('table will unmount'),
        tableDidUnmount: () => console.log('table did unmount'),
        onPaginationChange: function(nextPage, setPage) {
            setPage(nextPage);
        },
         
    });

      
    
    $('#changeRows').on('change', function() {
        table.updateRowsPerPage(parseInt($(this).val()));
    });

    $('#ListViewSelect').on('change',function(){
        if(this.value === 'teamtask'){
            loadMyTeamTasks();

        }
        else if(this.value === 'mytask'){
            loadMyTasks();
        }


    });
    loadMyTasks();

    function refreshData(){
      $('.gs-pagination .btn').each(function(){
          if(this.dataset.page == 0){
            this.click();
          }
      });
    }

    $('#refresh').click(function() {
        table.refresh(true);
        onLoadTask();
    })

    function loadMyTeamTasks(){
        $.ajax({
            url:'/timesheets/getMyTeamTask',
            type:"get",
            datatype:'json'
        })
        .done((response)=>{
            table.setData(response, columns);
            anchorClickFunctionalities();
           // anotherEditFunctionality();
            additionaldeleteFunctionality();
            addCheckBoxAction();
            refreshData();
         })
         .fail((jqXHR,status,error)=>{
             console.log('jqXHR: '+jqXHR);
             console.log('error: '+JSON.stringify(jqXHR));

         })
    }



    function loadMyTasks(){

        $.ajax({
            url:'/timesheets/getTasklist',
            type:"get",
            datatype:'json'
        })
        .done((response)=>{
            table.setData(response, columns);
            anchorClickFunctionalities();
           // anotherEditFunctionality();
            additionaldeleteFunctionality();
            addCheckBoxAction();
            refreshData();
         })
         .fail((jqXHR,status,error)=>{
             console.log('jqXHR: '+jqXHR);
             console.log('error: '+JSON.stringify(jqXHR));

         })
       }
    }); 


    function addCheckBoxAction(){
      $('.checkBox').unbind('change');
      $('.checkBox').on('change',function(event){
        event.stopImmediatePropagation();
        event.stopPropagation();
        $('#deleteSelected').prop('disabled',true);
        let count = 0;
        $('.checkBox').each(function(){
            if(this.checked){
              $('#deleteSelected').prop('disabled',false);
              count++;
            }
        });
        if(count === $('.checkBox').length){
            $('#mainCheckBox').prop('checked',true);
        }
        else{
          $('#mainCheckBox').prop('checked',false);
        }

      });
      $('#deleteSelected').unbind('click');

      $('#deleteSelected').on('click',function(){
        let idList = '';

          $('.checkBox').each(function(){
            if(this.checked){
              idList = `${idList},'${this.dataset.id}'`;
              console.log(this.dataset.id)
          }
          });
      idList = idList.substring(1);

      if( idList && confirm('Are you sure to Delete this record !')  ){
        $.ajax({
        url : '/timesheets/deleteBulkTask',
        type:'get',
        data : {
                taskId : idList
               },

        })
        .done((response) => {
              
              alert("Task Deleted Succesfullly !");
              window.location.reload()
             
        })
        .fail((jqXHR, status, error) => {
              console.log('jqXHR  '+JSON.stringify(jqXHR));
              //window.location.reload()
        }) 
      }


      });


      $('#mainCheckBox').unbind('change');

      $('#mainCheckBox').on('change',function(){
        $('#deleteSelected').prop('disabled',!this.checked);
        $('.checkBox').prop('checked',this.checked);
      });


    }

    //timesheetListViewest
    function anchorClickFunctionalities(){
      $('a.taskreferenceTag').on('click',function(event){
        event.stopImmediatePropagation();
        event.stopPropagation();
        handleTableData(this.id);
        
      })
    }

    function handleTableData(ids){
      $('#taskViewModal').modal('show');
        let taskId =ids;
        $('#detailLoadingSpinner').show();
        $.ajax({
          url : '/timesheets/fetchTaskDetail',
          type:'get',
          data : {
              taskId : taskId
          },
          dataType: 'json',
        })
        
        .done((res)=>{
          
          console.log("jhdgjhd"+JSON.stringify(res));
          if(res.length>0)
          {
            let taskRecord = res[0];
            let htmlTable = '';
                              htmlTable += '<tr>';
                                  htmlTable += '<td><strong>Task Name</strong></td>';
                                  htmlTable += '<td>'+taskRecord.tskname+'</td>';
                                  htmlTable += '<td><strong>Project</strong></td>';
                                  htmlTable += '<td>'+taskRecord.projname+'</td>';
                              htmlTable += '</tr>';
                              htmlTable += '<tr>';
                                htmlTable += '<td><strong>Function</strong></td>';
                                htmlTable += '<td>'+taskRecord.function+'</td>';
                                  htmlTable += '<td><strong>Project Task Category</strong></td>';
                                  htmlTable += '<td>'+taskRecord.categoname+'</td>';
                              htmlTable += '</tr>';
                              htmlTable += '<tr>';
                                htmlTable += '<td><strong> Task Type</strong></td>';
                                htmlTable += '<td>'+taskRecord.task_type__c+'</td>';
                                htmlTable += '<td><strong>Assigned Heroku Resource</strong></td>';
                                htmlTable += '<td>'+taskRecord.contname+'</td>';
                                  
                              htmlTable += '</tr>';
                             
                              htmlTable += '<tr>';

                                htmlTable += '<td><strong>DeadLine Type</strong></td>';
                                htmlTable += '<td>'+taskRecord.deadline_type__c+'</td>';

                                htmlTable += '<td><strong>Status</strong></td>';
                                htmlTable += '<td>'+taskRecord.task_stage__c+'</td>';
                                htmlTable += '</tr>';
                                htmlTable += '<tr style="background-color:#d3d3d3";>';
                                htmlTable += '<td><h5 >Task Information:</h5></td>';
                                htmlTable += '<td></td>';
                                htmlTable += '<td></td>';
                                htmlTable += '<td></td>';
                            htmlTable += '</tr>';

                            htmlTable += '<tr>';
                                htmlTable += '<td><strong>Planned Task Date</strong></td>';
                                htmlTable += '<td>'+taskRecord.start_date__c.split('T')[0]+'</td>';
                                htmlTable += '<td><strong>Planned Hours</strong></td>';
                              htmlTable += '<td>'+taskRecord.planned_hours__c+'</td>';
                            htmlTable += '</tr>';

                            htmlTable += '<tr>';
                              htmlTable += '<td><strong>Planned Start Time</strong></td>';
                              htmlTable += '<td>'+taskRecord.start_time__c+'</td>';
                              htmlTable += '<td><strong>Planned End Time</strong></td>';
                              htmlTable += '<td>'+taskRecord.end_time__c+'</td>';
                          htmlTable += '</tr>';

                          htmlTable += '<tr style="background-color:#d3d3d3";>';
                                htmlTable += '<td><h5 >Metrics Actuals:</h5></td>';
                                htmlTable += '<td></td>';
                                htmlTable += '<td></td>';
                                htmlTable += '<td></td>';
                            htmlTable += '</tr>';
                            htmlTable += '<tr>';
                              htmlTable += '<td><strong>Actual Hours</strong></td>';
                              htmlTable += '<td>'+taskRecord.total_hours__c+'</td>';
                              htmlTable += '<td></td>';
                              htmlTable += '<td></td>';
                          htmlTable += '</tr>';
                            
                              $('#taskViewTable').empty();
                              $('#timeTableBody').empty();
                              $('#taskViewTable').html(htmlTable);

          $.ajax({
              url : '/timesheets/fetchTimesheetList',
              type:'get',
              data : {
              id : taskId
              },
              dataType: 'json',
          })
          .done((res)=>{
            $('#detailLoadingSpinner').hide();
            let str = '';
            res.forEach((dt,i)=>{
               str = str + '<tr>';
               str = `${str} <td> ${i+1} </td>`;
               str = `${str} <td> <button data-id="${dt.sfid}" type="button" class="btn btn-primary timeSheetDeleteBtn"> Delete </button> `;
               str = `${str} <td> <a href="/timesheets/timesheetListView?id=${dt.sfid}&modal=true" target="_blank" >  ${dt.tname} </a> </td>`;
               str = `${str} <td> ${dt.taskname} </td>`;
               str = `${str} <td> ${dt.start_time__c} </td>`;
               str = `${str} <td> ${dt.end_time__c} </td>`;
               str = `${str} <td> ${dt.description__c} </td>`;
               str = `${str} <td> ${dt.hours__c} </td> </tr>`;
            });
            $('#timeTableBody').html(str);
            bindEvents();
          })
          .fail(console.log);


          }
        })
    }

    function bindEvents(){
      $('.timeSheetDeleteBtn').unbind('click');
      $('.timeSheetDeleteBtn').on('click',function(){

        let id = this.dataset.id;
        console.log(id);

        if(id && confirm('Are you sure to Delete this record !') ){
          $.ajax({
          url : '/timesheets/deleteTimesheet/'+id,
          type:'get',
          dataType: 'json',

          })
          .done((response) => {
                console.log('resonse   :'+response);
                if(response == 200)
                alert("Task Deleted Succesfullly !");
                window.location.reload()
               
          })
          .fail((jqXHR, status, error) => {
                console.log('jqXHR  '+JSON.stringify(jqXHR));
                window.location.reload()
          }) 
        }

      });

    }


    function additionaldeleteFunctionality()
    {

    $('.deleteTask').on('click',function(event){

      event.preventDefault();
      event.stopPropagation();
      event.stopImmediatePropagation();
    //  $('#parentId').hide();
    // let parentId = document.getElementById('parentId').innerHTML;
      let parentId = this.id;
    console.log('TaskId  '+parentId);
    var r = confirm('Are you sure to Delete this record !');
     // alert('Are you sure to  Delete this record !');
     if (r == true) 
            {
  
    $.ajax({
    url : '/timesheets/deleteTask/'+parentId,
    type:'get',
    dataType: 'json',

    })
    .done((response) => {
          console.log('resonse   :'+response);
          if(response == 200)
          alert("Task Deleted Succesfullly !");
          window.location.reload()
         
    })
    .fail((jqXHR, status, error) => {
          console.log('jqXHR  '+JSON.stringify(jqXHR));
          window.location.reload()
    }) 
  }
    })
}
    
    function anotherEditFunctionality()
    {
        $('.editTask').on('click',function(event){
            event.stopPropagation();
            event.stopImmediatePropagation();
            let taskId = this.id;
        //    alert('taskId ' +taskId);
            $('#taskEditModal').modal('show');
                        $.ajax({
                            url : '/timesheets/fetchTaskDetail',
                            type:'get',
                            data : {
                                taskId : taskId
                            },
                            dataType: 'json',
                         //   beforeSend : function(){
                          //    $('#detailLoadingSpinner').show();
                       //     }
                        })  
                        .done((response)=>{
                          //  alert(JSON.stringify(response));
                          console.log('taskDetail  : '+JSON.stringify(response));
                          let taskDetail = response[0];
                          document.forms["editTaskForm"]["tskName"].value = taskDetail.name;
                         document.forms["editTaskForm"]["assigneTo"].value = taskDetail.assigned_manager__c;
                          document.forms["editTaskForm"]["start"].value = taskDetail.start_time__c;
                          document.forms["editTaskForm"]["endTime"].value = taskDetail.end_time__c;
                          document.forms["editTaskForm"]["hrs"].value = taskDetail.planned_hours__c;
                          document.forms["editTaskForm"]["taskType"].value = taskDetail.task_type__c;
                           //  document.forms["editTaskForm"]["dt"].value = strdeparture;
                             document.forms["editTaskForm"]["hide"].value = taskDetail.sfid;
                           })
                        .fail((jqXHR, status, error) => {
                          console.log('jqXHR   '+JSON.stringify(jqXHR));
                          console.log('error  '+error);
                      })
    
        })
        $('#editTaskButton').on('click',function(event){

          event.preventDefault();
                    event.stopPropagation();
                    event.stopImmediatePropagation();
               //     alert('Save Button Clicked !');
                    var $inputs = $('#editTaskForm :input');

                    // not sure if you wanted this, but I thought I'd add it.
                    // get an associative array of just the values.
                    var values = {};
                    $inputs.each(function() {
                        values[this.name] = $(this).val();
                    });
                    
                 //   alert('formValues : '+JSON.stringify(values));

                    $.ajax({
                        url : '/timesheets/updateTask',
                        type:'post',
                        data: values,
                        dataType : 'json'
                    })
                    .done((response) => {
                          console.log('response   :'+response);
                    })
                    .fail((jqXHR, status, error) => {
                          console.log('jqXHR  '+JSON.stringify(jqXHR));
                    })

        })
    }
</script>
