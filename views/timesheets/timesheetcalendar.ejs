<% include ../partials/navbar %> 
<% include ../partials/footer %>
<!-- <% include ../partials/footer %> -->

<link href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/2.6.1/fullcalendar.min.css" type="text/css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.2/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/2.6.1/fullcalendar.min.js"></script>
<div class="form-group" style="overflow-y: auto;">
  <p id="objUser"><%= objUser %></p>
  <p id="objname"><%= objname %></p>
  <p id="objUserId"><%= objUserId %></p>
  <p id="contactList"><%= contactList %></p>
  <center><h3 style="text-align: center; margin-top: 20px;">Calendar</h3></center>     

     <div class="row" style="overflow-y: auto;">
           <div class="col-md-6">
              <label for="validationTooltip02">Select Project</label>
                 <select class="custom-select custom-select-sm form-control" id="selproject" name="Selectproject">
                    <option  value='None'>None</option>
                   <option selected value="allproject">All Project</option>
                    <% if(projectList.length != 0) { %>
                        <% projectList.sort((a,b)=> (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0) )  %>
                    <% projectList.forEach((eachProject) => { %>
                    <option value="<%= eachProject.sfid %>" ><%= eachProject.name %></option>
                    <% }) %>
                   <% } %>
                 </select>
           </div>
  <div class="col-md-6">
    <label for="validationTooltip02">Select View</label>
    <select class="custom-select custom-select-sm form-control" readonly="true" id="Selectview" readonly="true" name="Selectview">
        <!-- <option value''>None</option> -->
        <option  value="currentuser" selected >current User View</option>
        <% if(objUser.isManager) { %>
        <option value="teamview">Team View</option>
        <% } %>
    </select>
</div>
</div>

<div >
  <br>
  <h2 style="text-align: center;" id = "calMonth"></h2><h2 style="text-align: center;" id = "calYear"></h2>
    
  </div>

<body>
<div class="container">
    <div class="row">
        <div class="col-xs-12" style="overflow-y: auto;">
         
            <div id="bootstrapModalFullCalendar" style="overflow-y: auto;"></div>
        </div>
    </div>
</div>

<div id="fullCalModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">Ã—</span> <span class="sr-only">close</span></button>
                <h4 id="modalTitle" class="modal-title"></h4>
            </div>
            <div id="modalBody" class="modal-body"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <a class="btn btn-primary" id="eventUrl" target="_blank">Event Page</a>
            </div>
        </div>
    </div>
</div>

<style>
  .fc-day-grid-event .fc-content {
    white-space: nowrap;
    overflow: hidden;
    cursor: pointer;
    color: white;
  }

  .fc-toolbar .fc-center {
    display: none;
}

</style>






<script>
    $(document).ready(function() { 
      $('#objUser').hide();
      $('#objname').hide();
      $('#objUserId').hide();
      $('#contactList').hide(); 
  //    $('#contactList').hide();
      let objUser = document.getElementById('objUser').innerHTML; 
      let objUserName = document.getElementById('objname').innerHTML; 
      let objUserId = document.getElementById('objUserId').innerHTML; 
      let contactList = document.getElementById('contactList').innerHTML;
      console.log('objuser +++'+objUser);
      console.log('objuser name +++'+objUserName);
      console.log('objuser objUserId +++'+objUserId);
      console.log('contactList +++'+contactList);
        var today = new Date();
        var eventsData ;  

         var  months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; 
       // $('calMonth').append('welcome to gohilinfotech.in');
        var monthNumber = today.getMonth();
        document.getElementById('calMonth').innerHTML= months[monthNumber]+' '+today.getFullYear();     

       $.ajax({ 
          type: 'GET',
          url: '/users/getNullevents',
          data : {
              'date': today
          },
          dataType: 'json'
      })
      .done(function( data ) {
        console.log( "Initial data load Sample of data: nkjdfjsdfb", data );
         eventsData = data;
          console.log('JSON.Stringied Data of eventsfdg gdfg : '+JSON.stringify(eventsData));
          $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
          $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource',data);         
         $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
      })
      .fail(function(jqXHR, textStatus, err){
        console.log('AJAX error response :',textStatus);
    }) 

    
       /*  initial data Load    
        $.ajax({ 
          type: 'GET',
          url: '/users/getevents',
          data : {
              'date': today
          },
          dataType: 'json'
      })
      .done(function( data ) {
         // console.log( "Initial data load Sample of data:", data );
          eventsData = data;
          console.log('JSON.Stringied Data of events : '+JSON.stringify(eventsData));
          $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
          $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', eventsData);         
         $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
      })
      .fail(function(jqXHR, textStatus, err){
          console.log('AJAX error response :',textStatus);
      }) 

       */
        /*  initial data Load END   */
        var selectProj;
        var selectedView; 
        $('#selproject').on('change',function(){
           selectProj = this.value;
           console.log('selectProj '+selectProj);
          // $('#Selectview').val('None');
           if(selectProj=='None')
           {
            $('#Selectview').attr("readonly",true);
           }
           else{
            $('#Selectview').attr("readonly",false);

           }
        });
         $('#Selectview').on('change',function(){
          selectedView=this.value;
          console.log('selected' +selectedView);
          let selecteddate = document.getElementById('calMonth').innerHTML;
          console.log('slected months '+selecteddate);


          if(selectProj=='allproject' && selectedView=='currentuser')
          {

        $.ajax({ 
            type: 'GET',
            url: '/users/getevents',
            data : {
                'date': selecteddate
            },
            dataType: 'json'
        })
        .done(function( data ) {
            console.log( "Sample of data:", data );
            eventsData = data;
            console.log('JSON.Stringied Data of events : '+JSON.stringify(eventsData));
            $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
            $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', eventsData);         
            $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
        })
        .fail(function(jqXHR, textStatus, err){
            console.log('AJAX error response :',textStatus);
        }) 
      }
      else if(selectProj=='allproject' && selectedView=='teamview')
          {
         //   alert("team view & all project");
            $.ajax({ 
              type: 'GET',
              url: '/users/geteventsTeams',
              data : {
                  'date': selecteddate
              },
              dataType: 'json'
          })
          .done(function( data ) {
              console.log( "Team view Sample of data:", data );
              eventsData = data;
              console.log('JSON.Stringied Data of events Team View : '+JSON.stringify(eventsData));
              $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
              $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', eventsData);         
              $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
          })
          .fail(function(jqXHR, textStatus, err){
              console.log('AJAX error response :',textStatus);
          }) 
          }
          else if(selectProj!='allproject' && selectedView=='currentuser'){
            console.log('selected project for current User '+selectProj);
            $.ajax({ 
              type: 'GET',
              url: '/users/geteventsProj',
              data : {
                  'projectid': selectProj,
                  'date': selecteddate
              },
              dataType: 'json'
          })
          .done(function( data ) {
              console.log( "current view on particuar project Sample of data:", data );
              eventsData = data;
              console.log('JSON.Stringied Data of events Team View : '+JSON.stringify(eventsData));
              $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
              $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', eventsData);         
              $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
          })
          .fail(function(jqXHR, textStatus, err){
              console.log('AJAX error response :',textStatus);
          })
        }
          else if(selectProj!='allproject' && selectedView=='teamview'){
            console.log('Team View & particula project'+selectProj);
         /*   $.ajax({ 
              type: 'GET',
              url: '/users/getProjectRealted',
              data : {
                  'projectid': selectProj,
                  'date': today
              },
              dataType: 'json'
          })
          .done((data)=>{
            console.log('data  '+JSON.stringify(data));   
          })
          .fail(function(jqXHR, textStatus, err){
            console.log('AJAX error response :',textStatus);
        })
        */

            $.ajax({ 
              type: 'GET',
              url: '/users/geteventsProjteam',
              data : {
                  'projectid': selectProj,
                  'date': selecteddate
              },
              dataType: 'json'
          })
          .done(function( data ) {
              console.log( "Team view on particuar project Sample of data:", data );
              eventsData = data;
              console.log('JSON.Stringied Data of events Team View : '+JSON.stringify(eventsData));
              $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
              $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', eventsData);         
              $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
          })
          .fail(function(jqXHR, textStatus, err){
              console.log('AJAX error response :',textStatus);
          })
                  }
          
      });
        /*updating values on next click */
        $('body').on('click', 'button.fc-next-button', function() {
            var b = $('#bootstrapModalFullCalendar').fullCalendar('getDate');
         //    alert(b.format('L'));
            var date = b.format('L');
            console.log('date '+date);
            monthNumber=date.split('/')[0];
            document.getElementById('calMonth').innerHTML= months[monthNumber-1]+' '+date.split('/')[2];
            $('#Selectview').val('None');
            $('#selproject').val('None');
        
            $.ajax({ 
                type: 'GET',
                url: '/users/getNullevents',
                data : {
                    'date': date
                },
                dataType: 'json'
            })
            .done(function( data ) {
                console.log( "Sample of data:", data );
            //  eventsData = data;
                $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
                $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', data);         
                $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
            })
            .fail(function(jqXHR, textStatus, err){
                console.log('AJAX error response :',textStatus);
            })     
        });
        /*updating values on prev click */
        $('body').on('click', 'button.fc-prev-button', function() {
            var b = $('#bootstrapModalFullCalendar').fullCalendar('getDate');
           //alert(b.format('L'));
            var date = b.format('L');
            console.log('date '+date);
            monthNumber=date.split('/')[0];
            document.getElementById('calMonth').innerHTML= months[monthNumber-1]+' '+date.split('/')[2];
            $('#Selectview').val('None');
            $('#selproject').val('None');
        
            $.ajax({ 
                type: 'GET',
                url: '/users/getNullevents',
                data : {
                    'date': date
                },
                dataType: 'json'
            })
            .done(function( data ) {
                console.log( "Sample of data:", data );
            //  eventsData = data;
                $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
                $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', data,{textColor : 'white'});         
                $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
            })
            .fail(function(jqXHR, textStatus, err){
                console.log('AJAX error response :',textStatus);
            })     
        });
        /*Task Form post method */
        
        


        $('#taskForm').submit(function(e) {
            e.preventDefault();
            var values = $(this).serialize();
            console.log('values   ' + values);
            let aryData = $(this).serializeArray();
            
            var deadlin = $('#deadline option:selected').val();
            console.log('deadline ++++  ' + deadlin);
            if (deadlin == 'Block Time') {
                var startDate = $('#plannedstarttimeTask').val();
                console.log('plandatejhjbkjbjk ' + startDate);
                if (startDate == '') {
                    alert('Error: Please Fill Planned Start Time');
                }
                var endDate = $('#plannedendtimeTask').val();
                console.log('plandatejhjbkjbjk ' + endDate);
                if (endDate == '') {
                    alert('Error: Please Fill Planned End  Time');
                }
                if (endDate != '' && startDate != '') {
                    var starthours = Number(startDate.match(/^(\d+)/)[1]);
                    var startminutes = Number(startDate.match(/:(\d+)/)[1]);
                    //  var startAMPM = startDate.match(/\s(.*)$/)[1];
                    var endhours = Number(endDate.match(/^(\d+)/)[1]);
                    var endminutes = Number(endDate.match(/:(\d+)/)[1]);
                    // var endAMPM = endDate.match(/\s(.*)$/)[1];
                    //  var AMPM = startDate.match(/\s(.*)$/)[1];
                    console.log('starthours ' + starthours);
                    console.log('startminutes ' + startminutes);
                    //     console.log('startAMPM '+startAMPM);
                    console.log('endhours ' + endhours);
                    console.log('endminutes ' + endminutes);
                    //  console.log('endAMPM '+endAMPM);

                    if (startDate > endDate) {
                        alert('Error: Planned Start time should be less than Planned End time. !')
                    }

                    if (starthours > endhours) {
                        alert('Error: Planned Start time should be less than Planned End time. !')
                    } else if ((starthours == endhours) && (startminutes > endminutes)) {
                        alert('Error: Planned Start time should be less than Planned End time. !')
                    }
                    /*   else if((starthours == endhours) && (startminutes = endminutes))
                       {
                         alert('Error: Planned Start time should be less than Planned End time. !')
                       }*/
                    else {
                        $("#submitbutton").attr("disabled", true);
                        $.ajax({
                                url: "/timesheets/createtask",
                                type: "post",
                                data: values,
                            })
                            .done((data) => {
                                console.log('data ' + JSON.stringify(data))
                                let resp = JSON.stringify(data);
                                console.log('dataaaaa' + resp);
                                if (data == 'Task saved Successfully') {
                                    document.getElementById("taskForm").reset()
                                    let errorHtml = '<div class="alert alert-success alert-dismissible fade show" role="alert">' + resp +
                                        '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                        '<span aria-hidden="true">&times;</span>' +
                                        '</button>' +
                                        '</div>';
                                    $('#errorMessages').empty();
                                    $('#errorMessages').append(errorHtml);
                                    $("#submitbutton").attr("disabled", false);
                                    //  $("#createTaskModal").modal("hide");
                                    window.location.reload()
                                } else {
                                    //document.getElementById("taskForm").reset()
                                    let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + resp +
                                        '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                        '<span aria-hidden="true">&times;</span>' +
                                        '</button>' +
                                        '</div>';
                                    $('#errorMessages').empty();
                                    $('#errorMessages').append(errorHtml);
                                    $("#submitbutton").attr("disabled", false);
                                    //  $("#createTaskModal").modal("hide");
                                    // window.location.reload()
                                }
                            })
                            .fail((jqXHR, status, error) => {
                                console.log('jqXHR  : ' + JSON.stringify(jqXHR));
                                console.log('error  : ' + error);
                                let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + resp +
                                    '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                    '<span aria-hidden="true">&times;</span>' +
                                    '</button>' +
                                    '</div>';
                                $('#errorMessages').empty();
                                $('#errorMessages').append(errorHtml);
                                $("#createTaskModal").modal("hide");
                                //  window.location.reload()
                            });
                    }
                }

            } else {
                $("#submitbutton").attr("disabled", true);
                $.ajax({
                        url: "/timesheets/createtask",
                        type: "post",
                        data: values,
                    })
                    .done((data) => {
                        console.log('data ' + JSON.stringify(data))
                        let resp = JSON.stringify(data);
                        console.log('dataaaaa' + resp);
                        if (data == 'Task saved Successfully') {
                            document.getElementById("taskForm").reset()
                            let errorHtml = '<div class="alert alert-success alert-dismissible fade show" role="alert">' + resp +
                                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                '<span aria-hidden="true">&times;</span>' +
                                '</button>' +
                                '</div>';
                            $('#errorMessages').empty();
                            $('#errorMessages').append(errorHtml);
                            $("#submitbutton").attr("disabled", false);
                            window.location.reload()
                        } else {
                            //document.getElementById("taskForm").reset()
                            let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + resp +
                                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                '<span aria-hidden="true">&times;</span>' +
                                '</button>' +
                                '</div>';
                            $('#errorMessages').empty();
                            $('#errorMessages').append(errorHtml);
                            $("#submitbutton").attr("disabled", false);
                            // window.location.reload()
                        }
                    })
                    .fail((jqXHR, status, error) => {
                        console.log('jqXHR  : ' + JSON.stringify(jqXHR));
                        console.log('error  : ' + error);
                        let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + resp +
                            '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                            '<span aria-hidden="true">&times;</span>' +
                            '</button>' +
                            '</div>';
                        $('#errorMessages').empty();
                        $('#errorMessages').append(errorHtml);
                        //   window.location.reload()
                    });
            }

})
        /*Timesheet Form post method */
        $('#fillActualsForm').submit(function(e){
        e.preventDefault();
        var values = $(this).serialize();
        console.log('values   '+values);
        var startDate = $('#startTime').val();
        console.log('startTime '+startDate);
        var endDate = $('#endTime').val();
            console.log('endTime '+endDate);
           if(startDate == '')
            {
              alert('Error: Please Fill Actual Start Time');
            }
          
          else if(endDate == '')
            {
              alert('Error: Please Fill Actual End Time');
            }
           else if(startDate > endDate)
            {
              alert('Error: Actual Start Time should be less than Actual End Time. !')
            }
          else
            {
              $("#submitbuttonnn").attr("disabled", true);
              $.ajax({
                      url: "/timesheets/fillactuals",
                      type: "post",
                      data: values ,
                     })
                .done((data)=>{
                    console.log('data '+JSON.stringify(data))
                    let resp = JSON.stringify(data);
                    console.log('dataaaaa' +resp);
                    if(data == 'Successfully Inserted')
                    {
                      document.getElementById("fillActualsForm").reset()
                      let errorHtml = '<div class="alert alert-success alert-dismissible fade show" role="alert">'+ resp+
                        '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'+
                        '<span aria-hidden="true">&times;</span>'+
                        '</button>'+
                        '</div>';
                        $('#errorMessagesss').empty();
                        $('#errorMessagesss').append(errorHtml); 
                        $("#submitbuttonnn").attr("disabled", false);
                        window.location.reload()
                    }
                    else
                    {
                      //document.getElementById("taskForm").reset()
                      let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">'+ resp+
                        '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'+
                        '<span aria-hidden="true">&times;</span>'+
                        '</button>'+
                        '</div>';
                        $('#errorMessagesss').empty();
                        $('#errorMessagesss').append(errorHtml); 
                        $("#submitbuttonnn").attr("disabled", false);
                    }
                })
                .fail((jqXHR, status, error) =>{
                     let resp = JSON.stringify(jqXHR);
                    console.log('jqXHR  : '+JSON.stringify(jqXHR));
                    console.log('error  : '+error);
                    let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">'+ resp+
                        '<button type="button" class="close" data-dismiss="alert" aria-label="Close">'+
                        '<span aria-hidden="true">&times;</span>'+
                        '</button>'+
                        '</div>';
                        $('#errorMessagesss').empty();
                        $('#errorMessagesss').append(errorHtml); 
                });
            }
   
        })
        $('#bootstrapModalFullCalendar').fullCalendar({
            header: {
                left: '',
                center: 'title',
                right: 'prev next'
            },
            eventClick:  function(event, jsEvent, view) {
                $('#modalTitle').html(event.title);
                $('#modalBody').html(event.description);
                $('#eventUrl').attr('href',event.url);
                $('#fullCalModal').modal();
                return false;
            },
            displayEventTime : false,
            allDay : true,
            firstDay: 1,
            textColor :'white',
           // nextDayThreshold: '00:00:00',
           eventClick: function(calEvent, jsEvent, view) {
                var dt = calEvent.start.format('YYYY-MM-DD');
                //alert(dt);
                var dateParts = dt.split('-');
                var selectedDate = dateParts[1]  + '/' + dateParts[2] + '/' + dateParts[0];
            //   alert(selectedDate); console.log('selectedDate   '+selectedDate);
                let seletedDate = new Date(selectedDate);
                console.log('seletedDate   '+seletedDate);
                let currentDate = new Date();
                console.log('currentDate  :  '+currentDate );
            //    let todaydate = new Date().getTime() +1296000000;
                let todaydate = new Date().getTime() +604800000;
                let tomoorow=new Date(todaydate);
                console.log('today plus 15 day= '+tomoorow);
              //  let before=new Date().getTime()-1296000000;
              let before=new Date().getTime()-604800000;
                let beforedate=new Date(before);
                console.log('15 day before today '+ beforedate);
            
                if(calEvent.title == 'Create Task')
                {
                    console.log('calEvent.start '+calEvent.start);
                    $('.datepic').val(selectedDate);
                    $('.dynamicRow').each(function(){
                        if(this.id !== 'formRowTask1')
                            this.remove();
                    });
                    if(seletedDate.getTime() < currentDate.getTime())
                    {
                        $('.plannedstarttimeTask').prop("disabled",true);
                        $('.plannedendtimeTask').prop("disabled",true);
                        $('.deadline').prop("disabled",true);
                    }
                    else
                    {
                        $('.deadline').prop("disabled",false);
                        $('.plannedstarttimeTask').prop("disabled",true);
                        $('.plannedendtimeTask').prop("disabled",true);
                       /* $('.deadline').on('change',function(){
                          let deadValue=this.value;
                          console.log('deadValue' +deadValue);
                          if(deadValue=='Deadlines')
                          {
                          $('#plannedstarttimeTask').prop("disabled",true);
                          $('#plannedendtimeTask').prop("disabled",false);
                        }
                          else
                          {
                            $('#plannedstarttimeTask').prop("disabled",false);
                            $('#plannedendtimeTask').prop("disabled",false);
                          }
                        });*/
            
                    }
                 //   if(seletedDate.getTime()<todaydate && seletedDate.getTime()>before)
                      if(seletedDate.getTime()>before)
                    {
                      console.log('objuser name++++'+objUserName);
                      console.log('objuserId ++++'+objUserId);
                      console.log('contactList ++++'+contactList.name);
                      $("#createTaskModal").modal("show");
                   //     $('#Selectview').on('change',function(){
                     console.log('Selected view ++ '+selectedView);
                         // selectedView=this.value;
                        console.log('hii i m inside current user view');
                        $('.assignedresource').val('');

                        if(selectedView == 'currentuser')
                        {
                          $('.assignedresource').attr("readonly","readonly");
                          $('.assignedresource')
                          .append($("<option></option>")
                          .attr("value",objUserId)
                          .text(objUserName))                        
                        }

                        if(selectedView == 'teamview')
                        {
                          console.log('hii i m inside team view');
                          $('.assignedresource').attr("readonly",false);
                          $.ajax({
                        url : '/users/getContact',
                        data : {
                          
                        },
                        dataType : 'json',
                        type : 'get'
                    })
                    .done((response) => {
                        console.log('response  '+JSON.stringify(response));
                        if(response.length > 0)
                            {
                            response.forEach((eachContact) => {
                            console.log('eachContact.name '+eachContact.name);
                            $('.assignedresource')
                            .append($("<option></option>")
                            .attr("value",eachContact.sfid)
                            .text(eachContact.name))
                            }); 
                            }
                    })
                    .fail((jqXHR,text,err) => {
                        console.log('text  '+text + '  err '+err);
                        console.log('jqXHR '+JSON.stringify(jqXHR));

                    })


                        }
                      
                
                   //   })
                    }
                    else{
                      alert('The timesheet tasks are locked. You cannot create task before 7 days from today date. !');
                    }
                    
                }
                else if(calEvent.title == 'Fill Actuals')
                {
                  
                   
                
                    if(seletedDate.getTime() > currentDate.getTime())
                    {
                          alert('You cannot fill timesheet of the today date !');
                    }
                    else
                    {
                            document.getElementById("fillActualsForm").reset();
                            $('#dateIncurred').val(selectedDate);
                            
                            $("#fillActualsModal").modal("show");
                            $('#projectName').change(() => {            
                            var selectedProject = $("#projectName option:selected").val();
                          //  alert("You have selected the project : " + selectedProject );
                            let select = document.getElementById("selectedTask");
                             let length = select.options.length;
                              for (i = length-1; i > 0; i--) {
                                      select.options[i] = null;
                                      } 
                            if(selectedProject != 'None')
                            {
                                $.ajax({ 
                                type: 'GET',
                                url: '/timesheets/getrelatedtasks',
                                data : {
                                        'projectId' : selectedProject,
                                        'selectedDate' : selectedDate
                                },
                                dataType: 'json'
                                })
                                .done(function( taskData ) {
                                    console.log( "Sample of data:", JSON.stringify(taskData));
                                    if(taskData != null && taskData.length > 0)
                                    {
                                        var taskOptions = '';
                                        taskData.forEach((eachTask) => {
                                            taskOptions += '<option value="'+eachTask.sfid+'">'+eachTask.name+'</option>';
                                        })
                                        $('#selectedTask').append(taskOptions);
                                        //$('#selectedTask').html(taskOptions);
                                    }
                                        
                                })
                                .fail(function(jqXHR, textStatus, err){
                                    console.log('AJAX error response :',textStatus);
                                    
                                })
                            }
                            else
                            {
                                $("#selectedTask option[value !='None']").remove();  
                            }
                          
                        });
                    }
                }
               /* else if(calEvent.title == 'Details') {
                  var selecPro= $('#selproject').val();
                  var selecView= $('#Selectview').val();
                  console.log('selecPro : '+selecPro +' selecView: '+selecView);
                  $("#detailsModal").modal("show");
                  // start projectselected and curren user
                  if(selecPro!='allproject' && selecView =='currentuser'){
                //    alert('selected project & currentUSer');
                    //  alert('select view is : '+$('#Selectview').val());
                     $.ajax({ 
                         type: 'GET',
                         url: '/timesheets/getdetailsproject',
                         data : {
                             'date': selectedDate,
                             'selproject':$('#selproject').val()
                         },
                         dataType: 'json'
                     })
                     .done(function( taskData ) {
                         console.log( "Sample of data:", JSON.stringify(taskData));
                         console.log('sleePROJ :'+selecPro +'& selected view ='+selecView);
                         var tasktableData = ''; 
                         tasktableData  += '<thead><tr><th>Project Name</th><th>Task Name</th><th>Task Date</th><th>Status</th><th>Planned Hours</th><th>Actual Hours</th><th>Assigned to Heroku User</th></tr></thead>';    
                         taskData.forEach((eachTaskCol) => {  
                                 console.log('dt '+eachTaskCol.date);
                                 console.log('date str '+eachTaskCol.date.toString().split('T')[0]);
                                 var strDate = eachTaskCol.date.toString().split('T')[0];
                                 tasktableData += '<tr>';
                                  tasktableData  += '<td>'+eachTaskCol.projectName+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.name+'</td>';
                                 tasktableData  += '<td>'+strDate+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.status+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.plannedHours+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.actualHours+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.userName+'</td>';
                                 tasktableData += '</tr>';   
                         });
                        // $('#taskDetails').append(tasktableData);
                         $('#taskDetails').html(tasktableData);
                         $("#detailsModal").modal("show");
                     })
                     .fail(function(jqXHR, textStatus, err){
                         console.log('AJAX error response :',textStatus);
                         $("#detailsModal").modal("show");
                     })     
                   } 
                  
                //   <!-- End OF CurrenntUSER selected project -->

                // all project current user 
                if(selecPro=='allproject' && selecView =='currentuser'){
                 //   alert('selected project & currentUSer');
                    //  alert('select view is : '+$('#Selectview').val());
                     $.ajax({ 
                         type: 'GET',
                         url: '/timesheets/getdetails',
                         data : {
                             'date': selectedDate,
                             'selproject':$('#selproject').val()
                         },
                         dataType: 'json'
                     })
                     .done(function( taskData ) {
                         console.log( "Sample of data:", JSON.stringify(taskData));
                         console.log('sleePROJ :'+selecPro +'& selected view ='+selecView);
                         var tasktableData = ''; 
                         tasktableData  += '<thead><tr><th>Project Name</th><th>Task Name</th><th>Task Date</th><th>Status</th><th>Planned Hours</th><th>Actual Hours</th><th>Assigned to Heroku User</th></tr></thead>';    
                         taskData.forEach((eachTaskCol) => {  
                                 console.log('dt '+eachTaskCol.date);
                                 console.log('date str '+eachTaskCol.date.toString().split('T')[0]);
                                 var strDate = eachTaskCol.date.toString().split('T')[0];
                                 tasktableData += '<tr>';
                                  tasktableData  += '<td>'+eachTaskCol.projectName+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.name+'</td>';
                                 tasktableData  += '<td>'+strDate+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.status+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.plannedHours+'</td>';
                                 tasktableData  += '<td>'+eachTaskCol.actualHours+'</td>';
                                
                               
                                 tasktableData  += '<td>'+eachTaskCol.userName+'</td>';
                                 tasktableData += '</tr>';   
                         });
                        // $('#taskDetails').append(tasktableData);
                         $('#taskDetails').html(tasktableData);
                         $("#detailsModal").modal("show");
                     })
                     .fail(function(jqXHR, textStatus, err){
                         console.log('AJAX error response :',textStatus);
                         $("#detailsModal").modal("show");
                     })     
                   } 
                //end of current user all project

                // start of team view 
                if(selecView =='teamview'){
                  console.log('Team view detail action');
                  $("#detailsModal").modal("show");
                  $.ajax({ 
                    type: 'GET',
                    url: '/timesheets/getTeamdetails',
                    data : {
                        'date': selectedDate,
                        'selproject':$('#selproject').val()
                    },
                    dataType: 'json'
                })
                .done(function(tskdata){
                  console.log('sample task team view dataxx :'+JSON.stringify(tskdata));
                 // console.log('size of '+tskdata.length+'  ; '+tskdata[0].name);
                  if(tskdata.length==0){
                    var tasktableData='<h4>You are Not Team Manager for this Project or No task Available </h4>';
                    $('#taskDetails').html(tasktableData);
                      $("#detailsModal").modal("show");

                  }
                  else{
                  var tasktableData = '';
                      tasktableData  += '<thead>';
                      tasktableData  += '<tr>';
                      tasktableData  += ' <th>Project Name</th>';
                      tasktableData  += ' <th>Task Name</th>';
                      tasktableData  += ' <th>Task Date</th>';
                      tasktableData  += '<th>Planned Hours</th>';
                      tasktableData  += '<th>Actual Hours</th>';
                      tasktableData  += ' <th>Assigned to Heroku User</th>';
                      tasktableData  += '</tr>';
                      tasktableData  += '</thead>'; 
                      tskdata.forEach((eachTaskCol) => {
                        console.log('achdad'+eachTaskCol);
                        console.log('dt '+eachTaskCol.date);
                        console.log('date str '+eachTaskCol.date.toString().split('T')[0]);
                        var strDate = eachTaskCol.date.toString().split('T')[0];
                        tasktableData += '<tr>';
                        tasktableData  += '<td>'+eachTaskCol.projectName+'</td>';
                        tasktableData  += '<td>'+eachTaskCol.name+'</td>';
                        tasktableData  += '<td>'+strDate+'</td>';
                        tasktableData  += '<td>'+eachTaskCol.plannedHours+'</td>';
                        tasktableData  += '<td>'+eachTaskCol.actualHours+'</td>';
                        tasktableData  += '<td>'+eachTaskCol.userName+'</td>';
                        tasktableData += '</tr>';  
                  })
                  $('#taskDetails').html(tasktableData);
                      $("#detailsModal").modal("show");
                }
                })
                .fail(function(jqXHR, textStatus, err){
                  console.log('AJAX error response :',textStatus);
                  $("#detailsModal").modal("show");
              })

                }

                // end of team view
                
                  } */
            } 
        });
        var colorStyle = document.getElementsByClassName('fc-title');
        for (var i=0; i<colorStyle.length; i++) {
            colorStyle[i].style.color = 'white';
        }
    });

function handleChange(e){
        var value = e.target.value.trim();
        var index = e.target.dataset.label;
        if(!index){
            index = '';
        }
        console.log(index);
        var taskType = <%- JSON.stringify(taskType) %>;
        var data = taskType[value];
        if(data && data.length > 0){
            $('#tasktype'+index).find('option').remove().end();
             $('#tasktype'+index).append('<option value="">None</option>');
            data.forEach((dt)=>{
                $('#tasktype'+index).append(`<option value="${dt}">${dt}</option>`);
                $('#tasktype'+index).attr('disabled',false);
            });
        }
        else {
            $('#tasktype'+index).find('option').remove().end().append(`<option value="">None</option>`);
            $('#tasktype'+index).attr('disabled',true);
        }
    }

    


</script>





<!-- Create Task Modal -->
<div id="createTaskModal" class="modal fade bs-example-modal-lg" tabindex ="-1" role="dialog" aria-labelledby="myLargeModalLabel" >
<div class="modal-dialog modal-lg" role="document">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title" id="createTaskModal">Create Task</h5>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body">
      <div class="">
        <div id="errorMessages"></div>
      <form  id="taskForm" class="needs-validation" novalidate >
        <div id="taskformRow" >
            <div id="formRowTask1" class="dynamicRow" >
                <div  style="font-weight: bold;margin: 30px 0;font-family: system-ui;">New Task 1</div>
                <div class="form-group">  
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip01">Task Description <span style="color: red;">*</span></label>
                      <input type="text" class="form-control" id="validationTooltip01" placeholder=""  name="taskname" required>
                    </div>
                   
                    <div class="col-md-6">
                      <label for="validationTooltip02">function<span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control" onchange="handleChange(event);" id="function" name="function">
                          <option selected value=''>None</option>
                          <option value="Accounts">Accounts </option>
                          <option value="Compliance">Compliance</option>
                          <option value="Content">Content </option>
                          <option value="HR">HR</option>
                          <option value="IT_Support">IT Support</option>
                          <option value="Learning_Development">Learning & Development</option>
                          <option value="Operations">Operations</option>
                          <option value="Project">Project</option>
                          <option value="Self_Management">Self Management</option>
                          <option value="Beneficiary">Project - Beneficiary Engagement</option>
                          <option value="Internal">Internal - LLF</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                      <div class="col-md-6">
                           <label for="validationTooltip03">Task Type <span style="color: red;">*</span></label>
                            <select class="custom-select custom-select-sm form-control" disabled id="tasktype" name="tasktype">
                                <option value=''>None</option>
                            </select>
                      </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                  <div class="col-md-6">
                    <label for="validationTooltip03">Project <span style="color: red;">*</span></label>
                    <select class="custom-select custom-select-sm form-control" name="projectname">
                      <option value="" >None</option>
                      <% if(projectList.length != 0) { %>
                       <% projectList.forEach((eachProject) => { %>
                       <option value="<%= eachProject.sfid %>" ><%= eachProject.name %></option>
                       <% }) %>
                      <% } %>
                   </select>
                  </div>
                  <div class="col-md-6">
                    <label for="validationTooltip04">Task Date</label>
                    <input type="text" class="form-control datepic"   id="datePicker" required readonly name="taskdate">
                    
                  </div>
                </div>
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Assign to Heroku user <span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control assignedresource" name="assignedresource" id="assignedresource">
                        <option value="">None</option>
                       </select>


                    </div>

                    <div class="col-md-6">
                        <label for="validationTooltipUsername">Status <span style="color: red;">*</span></label>
                        <select class="custom-select custom-select-sm form-control" name="status" >
                             <option selected>None</option>
                             <option value="Started">Started</option>
                             <option value="On Hold">On Hold</option>
                             <option value="Completed">Completed</option>
                        </select>
                    </div>
                  </div>  
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned Start Time</label>
                      <input type="time" class="form-control plannedstarttimeTask" id="plannedstarttimeTask" name="plannedstarttime" required>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned End Time</label>
                      <input type="time" class="form-control plannedendtimeTask" id="plannedendtimeTask" name="plannedendtime" required>
                    </div>
                  </div>  
                </div>

                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltipUsername">Deadline Type</label>
                      <select class="custom-select custom-select-sm form-control deadline" id="deadline" name="deadline" >
                        <option selected>Select</option>
                        <option value="Deadlines">Deadlines</option>
                        <option value="Block Time">Block Time</option>
                   </select>
                    </div>
                    
                  </div>  
                </div>
            </div>
        </div>
        <div class="modal-footer">
          <button type="button" id="newRowBtn" style="background: #3a87ad;" class="btn btn-primary"> Add New Task Row</button>
          <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
          <button type="submit" id="submitbutton" class="btn btn-primary">Save</button>
        </div>

      </form>
    </div>
    </div>
  </div>
</div>
</div>

<script>
    bindEvent();

    $('#newRowBtn').click(function() {
        $('.recordD').unbind('click');
        $('.deadline').unbind('change');
        let datePic = $('#datePicker').val();
        var ele = document.getElementsByClassName('dynamicRow');
        var dummyRecord = document.getElementById('dummyRecord').cloneNode(true);
        var insideData = $('#taskformRow');
        insideData.append(`<div class="dynamicRow" id="formRowTask${ele.length + 1}">` + dummyRecord.innerHTML.replaceAll('{data}',ele.length + 1) + '</div>');  
        $('.datepic').val(datePic);
        bindEvent();
    });
    function bindEvent(){

    $('.recordD').click(function(e){
        console.log('running');
        var index = e.target.dataset.label;
        console.log('running',index);
        var dummyRecord = document.getElementById('formRowTask'+index);
        dummyRecord.remove();
        let parent = document.getElementById('taskformRow');
        let child = Array.from(parent.children);
        console.log('before etc ');
        child.forEach((dt,i)=>{
            if(index <= i+1){
                let d =  dt.innerHTML ;
                d =  d.replaceAll('function'+(i+2),'function'+(i+1));
                d =  d.replaceAll('New Task '+(i+2),'New Task '+(i+1));
                d =  d.replaceAll('taskname'+(i+2),'taskname'+(i+1));
                d =  d.replaceAll('deadline'+(i+2),'deadline'+(i+1));
                d =  d.replaceAll('plannedendtime'+(i+2),'plannedendtime'+(i+1));
                d =  d.replaceAll('plannedstarttime'+(i+2),'plannedstarttime'+(i+1));
                d =  d.replaceAll('status'+(i+2),'status'+(i+1));
                d =  d.replaceAll('assignedresource'+(i+2),'assignedresource'+(i+1));
                d =  d.replaceAll('taskdate'+(i+2),'taskdate'+(i+1));
                d =  d.replaceAll('projectname'+(i+2),'projectname'+(i+1));
                d =  d.replaceAll('tasktype'+(i+2),'tasktype'+(i+1));
                d =  d.replaceAll('data-label="'+(i+2),'data-label="'+(i+1));
                dt.setAttribute('id','formRowTask'+(i+1));
                dt.innerHTML = d;
                console.log('handle thses ',i+1);
            }
            
        });
        $('.recordD').unbind('click');
        bindEvent();
        console.log('done');
    });

    $('.deadline').on('change',function(){
        let deadValue=this.value;
        let id = this.id;
        let index = id.replace('deadline','');
        console.log(index,id,'  qqqqq');
        if(index != ''){
            if(deadValue=='Deadlines')
            {
                $('#plannedstarttimeTask'+index).prop("disabled",true);
                $('#plannedendtimeTask'+index).prop("disabled",false);
            }
            else if(deadValue=='Block Time'){
                 $('#plannedstarttimeTask'+index).prop("disabled",false);
                $('#plannedendtimeTask'+index).prop("disabled",false);
            }
            else
            {
                $('#plannedstarttimeTask'+index).prop("disabled",true);
                $('#plannedendtimeTask'+index).prop("disabled",true);
            }
        }
        else{
            if(deadValue=='Deadlines')
            {
                $('#plannedstarttimeTask').prop("disabled",true);
                $('#plannedendtimeTask').prop("disabled",false);
            }
            else if(deadValue=='Block Time'){
                 $('#plannedstarttimeTask').prop("disabled",false);
                $('#plannedendtimeTask').prop("disabled",false);
            }
            else
            {
                $('#plannedstarttimeTask').prop("disabled",true);
                $('#plannedendtimeTask').prop("disabled",true);
            }
        }
        $('.deadline').unbind('change');
        bindEvent();

    });


}
</script>


<!-- Fill Actuals  Modal -->
<div id="fillActualsModal" class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
<div class="modal-dialog modal-lg" role="document">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title" id="fillActualsModals">Fill Actuals</h5>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body">
      <div class="">
        <div id="errorMessagesss"></div>
      <form id="fillActualsForm" class="needs-validation" novalidate>
        <div class="form-group">  
          <div class="row">
            <div class="col-md-6">
              <label for="validationTooltip01">Project Name <span style="color: red;">*</span></label>
              <select class="custom-select custom-select-sm form-control" name="projectName" id="projectName">
                    <option selected>None</option>
                    <% if(projectList.length != 0) { %>
                        <% projectList.forEach((eachProject) => { %>
                        <option value="<%= eachProject.sfid %>" ><%= eachProject.name %></option>
                        <% }) %>
                    <% } %>
             </select>
            </div>
           
            <div class="col-md-6">
            <label for="validationTooltip04">Date Incurred</label>
            <input type="text" class="form-control datepic" class="dateIncurred" id="dateIncurred" readonly name="dateIncurred" required>
             
            </div>
          </div>
        </div>

        <div class="form-group"> 
          <div class="row">
          <div class="col-md-6">
            <label for="selectedTask">Task Description <span style="color: red;">*</span></label>
            <select class="custom-select custom-select-sm form-control" name="selectedTask" id="selectedTask" > 
                    <option value="None" selected>None</option>
           </select>
          </div>
          <div class="col-md-6">
            <label for="validationTooltipUsername">Status <span style="color: red;">*</span></label>
             <select class="custom-select custom-select-sm form-control" name="statusTimesheet">
                  <option selected>None</option>
                  <option value="Started">Started</option>
                  <option value="On Hold">On Hold</option>
                  <option value="Completed">Completed</option>
             </select>
            
          </div>
        </div>
        </div>


        <div class="form-group">
          <div class="row">
            <div class="col-md-6">
              <label for="validationTooltip02">Actual Start Time <span style="color: red;">*</span></label>
              <input type="time" class="form-control" id="startTime" placeholder="Last name" value="Otto" name="plannedStartTimeTimesheet" required>
            </div>
            
            <div class="col-md-6">
              <label for="validationTooltip02">Actual End Time <span style="color: red;">*</span></label>
              <input type="time" class="form-control" id="endTime" placeholder="Last name" value="Otto" name="plannedEndTimeTimesheet" required>
            </div>
          </div>  
        </div>
        
        <div class="form-group">
          <div class="row">
            <div class="col-md-6">
                  <label for="validationTooltip02">Description <span style="color: red;">*</span></label>
                  <textarea class="form-control" id="descriptionTimesheet" rows="3" autocomplete="off" name="descriptionTimesheet"></textarea>
            </div>

            <div class="col-md-6">
                <label >Representative</label>
                <select class="custom-select custom-select-sm form-control" name="representative">
                  <option value="<%= objUser.sfid %>" ><%= objUser.name %></option>
                  <!--   <% if(contactList.length != 0) { %>
                     <% contactList.forEach((eachContact) => { %>
                     <option value="<%= eachContact.sfid %>" ><%= eachContact.name %></option>
                     <% }) %>
                    <% } %> -->
                 </select>
            </div>

           
          </div>  
        </div>

        <div class="modal-footer">
          <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
          <button type="submit" class="btn btn-primary" id="submitbuttonnn">Save</button>
        </div>

      </form>
      </div>
    </div>
    
  </div>
</div>
</div>



<!-- Details  Modal -->
<div id="detailsModal" class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
<div class="modal-dialog modal-lg" role="document">
  <div class="modal-content">
    <div class="modal-header">
   <center><h5 class="modal-title" id="detailsModal">Project Tasks Detail</h5></center> 
      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body" style="overflow-y: auto;">
      <table id="taskDetails" class="table table-hover striped table-responsive" >
        
      </table>
    </div>
    <div class="modal-footer">
      <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
    </div>
  </div>
</div>
</div>

<div style="display:none;opacity:0" >
<div id="dummyRecord" class="dummyRecord">
                <i class="fa fa-trash recordD" data-label="{data}" style="float: right; color: white; background: #116288; padding: 9px; border-radius: 5px;font-size: 14px; cursor: pointer;"></i>
                <div  style="font-weight: bold;margin: 30px 0;font-family: system-ui;">New Task {data}</div>
                <div class="form-group">  
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip01">Task Description <span style="color: red;">*</span></label>
                      <input type="text" class="form-control" id="validationTooltip01" placeholder=""  name="taskname{data}" required>
                    </div>
                   
                    <div class="col-md-6">
                      <label for="validationTooltip02">function<span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control" id="function{data}" data-label="{data}" onchange="handleChange(event);" name="function{data}" >
                          <option selected value=''>None</option>
                          <option value="Accounts">Accounts </option>
                          <option value="Compliance">Compliance</option>
                          <option value="Content">Content </option>
                          <option value="HR">HR</option>
                          <option value="IT_Support">IT Support</option>
                          <option value="Learning_Development">Learning & Development</option>
                          <option value="Operations">Operations</option>
                          <option value="Project">Project</option>
                          <option value="Self_Management">Self Management</option>
                          <option value="Beneficiary">Project - Beneficiary Engagement</option>
                          <option value="Internal">Internal - LLF</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                      <div class="col-md-6">
                           <label for="validationTooltip03">Task Type <span style="color: red;">*</span></label>
                            <select class="custom-select custom-select-sm form-control" data-label="{data}" disabled id="tasktype{data}" name="tasktype{data}">
                                <option value=''>None</option>
                            </select>
                      </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                  <div class="col-md-6">
                    <label for="validationTooltip03">Project <span style="color: red;">*</span></label>
                    <select class="custom-select custom-select-sm form-control" name="projectname{data}">
                      <option value="" >None</option>
                      <% if(projectList.length != 0) { %>
                       <% projectList.forEach((eachProject) => { %>
                       <option value="<%= eachProject.sfid %>" ><%= eachProject.name %></option>
                       <% }) %>
                      <% } %>
                   </select>
                  </div>
                  <div class="col-md-6">
                    <label for="validationTooltip04">Task Date</label>
                    <input type="text" class="form-control datepic datePicker"   id="datePicker{data}" required readonly name="taskdate{data}">
                    
                  </div>
                </div>
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Assign to Heroku user <span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control assignedresource" name="assignedresource{data}" id="assignedresource{data}">
                        <option value="">None</option>
                       </select>


                    </div>

                    <div class="col-md-6">
                        <label for="validationTooltipUsername">Status <span style="color: red;">*</span></label>
                        <select class="custom-select custom-select-sm form-control" name="status{data}" >
                             <option selected>None</option>
                             <option value="Started">Started</option>
                             <option value="On Hold">On Hold</option>
                             <option value="Completed">Completed</option>
                        </select>
                    </div>
                  </div>  
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned Start Time</label>
                      <input type="time" class="form-control plannedstarttimeTask" id="plannedstarttimeTask{data}" name="plannedstarttime{data}" required>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned End Time</label>
                      <input type="time" class="form-control plannedendtimeTask" id="plannedendtimeTask{data}" name="plannedendtime{data}" required>
                    </div>
                  </div>  
                </div>

                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltipUsername">Deadline Type</label>
                      <select class="custom-select custom-select-sm form-control deadline" id="deadline{data}" name="deadline{data}" >
                        <option selected>Select</option>
                        <option value="Deadlines">Deadlines</option>
                        <option value="Block Time">Block Time</option>
                   </select>
                    </div>
                    
                  </div>  
                </div>
            </div>


</div>


</body>
</html>
