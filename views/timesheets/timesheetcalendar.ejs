<% include ../partials/navbar %> 
<% include ../partials/footer %>
<!-- <% include ../partials/footer %> -->

<link href="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/2.6.1/fullcalendar.min.css" type="text/css" rel="stylesheet" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.8.2/moment.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/fullcalendar/2.6.1/fullcalendar.min.js"></script>
<div class="form-group" style="overflow-y: auto;">
  <p id="objUser"><%= objUser %></p>
  <p id="objname"><%= objname %></p>
  <p id="objUserId"><%= objUserId %></p>
  <p id="contactList"><%= contactList %></p>
  <center><h3 style="text-align: center; margin-top: 20px;">Calendar</h3></center>     

     <div class="row" style="overflow-y: auto;">
           <div class="col-md-6">
              <label for="validationTooltip02">Select Project</label>
                 <select class="custom-select custom-select-sm form-control" id="selproject" name="Selectproject">
                    <option  value='None'>None</option>
                   <option selected value="allproject">All Project</option>
                    <% if(projectList.length != 0) { %>
                        <% projectList.sort((a,b)=> (a.name > b.name) ? 1 : ((b.name > a.name) ? -1 : 0) )  %>
                    <% projectList.forEach((eachProject) => { %>
                    <option value="<%= eachProject.sfid %>" ><%= eachProject.name %></option>
                    <% }) %>
                   <% } %>
                 </select>
           </div>
  <div class="col-md-6">
    <label for="validationTooltip02">Select View</label>
    <select class="custom-select custom-select-sm form-control" readonly="true" id="Selectview" name="Selectview">
        <!-- <option value''>None</option> -->
        <option  value="currentuser" selected >current User View</option>
        <% if(objUser.isManager) { %>
        <option value="teamview">Team View</option>
        <% } %>
    </select>
</div>
</div>

<div >
  <br>
  <h2 style="text-align: center;" id = "calMonth"></h2><h2 style="text-align: center;" id = "calYear"></h2>
    
  </div>

<body>
<div class="container">
    <div class="row">
        <div class="col-xs-12" style="overflow-y: auto;">
         
            <div id="bootstrapModalFullCalendar" style="overflow-y: auto;"></div>
        </div>
    </div>
</div>

<div id="fullCalModal" class="modal fade">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">Ã—</span> <span class="sr-only">close</span></button>
                <h4 id="modalTitle" class="modal-title"></h4>
            </div>
            <div id="modalBody" class="modal-body"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <a class="btn btn-primary" id="eventUrl" target="_blank">Event Page</a>
            </div>
        </div>
    </div>
</div>

<style>
  .fc-day-grid-event .fc-content {
    white-space: nowrap;
    overflow: hidden;
    cursor: pointer;
    color: white;
  }

  .fc-toolbar .fc-center {
    display: none;
}
.table td, .table th{
    white-space: nowrap !important;
    text-align: center;
    vertical-align: middle;
}


</style>






<script>
    $(document).ready(function() { 
      $('#objUser').hide();
      $('#objname').hide();
      $('#objUserId').hide();
      $('#contactList').hide(); 
  //    $('#contactList').hide();
      let objUser = document.getElementById('objUser').innerHTML; 
      let objUserName = document.getElementById('objname').innerHTML; 
      let objUserId = document.getElementById('objUserId').innerHTML; 
      let contactList = document.getElementById('contactList').innerHTML;
      console.log('objuser +++'+objUser);
      console.log('objuser name +++'+objUserName);
      console.log('objuser objUserId +++'+objUserId);
      console.log('contactList +++'+contactList);
      window.editIndex = [];
        var today = new Date();
        var eventsData ; 
        let dt = <%- objUser.isManager %>;
        console.log(dt); 
        $('#Selectview').attr('readonly',!dt);

         var  months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; 
       // $('calMonth').append('welcome to gohilinfotech.in');
        var monthNumber = today.getMonth();
        document.getElementById('calMonth').innerHTML= months[monthNumber]+' '+today.getFullYear();     
        
         
        $.ajax({ 
          type: 'GET',
          url: '/users/getevents',
          data : {
              'date': today
          },
          dataType: 'json'
      })
      .done(function( data ) {
         // console.log( "Initial data load Sample of data:", data );
          eventsData = data;
          console.log('JSON.Stringied Data of events : '+JSON.stringify(eventsData));
          $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
          $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', eventsData);         
         $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
      })
      .fail(function(jqXHR, textStatus, err){
          console.log('AJAX error response :',textStatus);
      }) 

       
        /*  initial data Load END   */
        var selectProj;
        var selectedView; 
        $('#selproject').on('change',function(){
           selectProj = this.value;
           console.log('selectProj '+selectProj);
          // $('#Selectview').val('None');
           if(selectProj=='None')
           {
            //$('#Selectview').attr("readonly",true);
           }
           else{
            //$('#Selectview').attr("readonly",false);

           }
        });

        $('#Selectview').on('change', function() {
            selectedView = this.value;
            console.log('selected' + selectedView);
            let selecteddate = document.getElementById('calMonth').innerHTML;
            console.log('slected months ' + selecteddate);


            if (selectProj == 'allproject' && selectedView == 'currentuser') {

                $.ajax({
                        type: 'GET',
                        url: '/users/getevents',
                        data: {
                            'date': selecteddate
                        },
                        dataType: 'json'
                    })
                    .done(function(data) {
                        console.log("Sample of data:", data);
                        eventsData = data;
                        console.log('JSON.Stringied Data of events : ' + JSON.stringify(eventsData));
                        $('#bootstrapModalFullCalendar').fullCalendar('removeEvents');
                        $('#bootstrapModalFullCalendar').fullCalendar('addEventSource', eventsData);
                        $('#bootstrapModalFullCalendar').fullCalendar('rerenderEvents');
                    })
                    .fail(function(jqXHR, textStatus, err) {
                        console.log('AJAX error response :', textStatus);
                    })
            } else if (selectProj == 'allproject' && selectedView == 'teamview') {
                //   alert("team view & all project");
                $.ajax({
                        type: 'GET',
                        url: '/users/geteventsTeams',
                        data: {
                            'date': selecteddate
                        },
                        dataType: 'json'
                    })
                    .done(function(data) {
                        console.log("Team view Sample of data:", data);
                        eventsData = data;
                        console.log('JSON.Stringied Data of events Team View : ' + eventsData);
                        $('#bootstrapModalFullCalendar').fullCalendar('removeEvents');
                        $('#bootstrapModalFullCalendar').fullCalendar('addEventSource', eventsData);
                        $('#bootstrapModalFullCalendar').fullCalendar('rerenderEvents');
                    })
                    .fail(function(jqXHR, textStatus, err) {
                        console.log('AJAX error response :', textStatus);
                    })
            } else if (selectProj != 'allproject' && selectedView == 'currentuser') {
                console.log('selected project for current User ' + selectProj);
                $.ajax({
                        type: 'GET',
                        url: '/users/geteventsProj',
                        data: {
                            'projectid': selectProj,
                            'date': selecteddate
                        },
                        dataType: 'json'
                    })
                    .done(function(data) {
                        console.log("current view on particuar project Sample of data:", data);
                        eventsData = data;
                        console.log('JSON.Stringied Data of events Team View : ' + JSON.stringify(eventsData));
                        $('#bootstrapModalFullCalendar').fullCalendar('removeEvents');
                        $('#bootstrapModalFullCalendar').fullCalendar('addEventSource', eventsData);
                        $('#bootstrapModalFullCalendar').fullCalendar('rerenderEvents');
                    })
                    .fail(function(jqXHR, textStatus, err) {
                        console.log('AJAX error response :', textStatus);
                    })
            } else if (selectProj != 'allproject' && selectedView == 'teamview') {
                console.log('Team View & particula project' + selectProj);
                /*   $.ajax({ 
                      type: 'GET',
                      url: '/users/getProjectRealted',
                      data : {
                          'projectid': selectProj,
                          'date': today
                      },
                      dataType: 'json'
                  })
                  .done((data)=>{
                    console.log('data  '+JSON.stringify(data));   
                  })
                  .fail(function(jqXHR, textStatus, err){
                    console.log('AJAX error response :',textStatus);
                })
                */

                $.ajax({
                        type: 'GET',
                        url: '/users/geteventsProjteam',
                        data: {
                            'projectid': selectProj,
                            'date': selecteddate
                        },
                        dataType: 'json'
                    })
                    .done(function(data) {
                        console.log("Team view on particuar project Sample of data:", data);
                        eventsData = data;
                        console.log('JSON.Stringied Data of events Team View : ' + JSON.stringify(eventsData));
                        $('#bootstrapModalFullCalendar').fullCalendar('removeEvents');
                        $('#bootstrapModalFullCalendar').fullCalendar('addEventSource', eventsData);
                        $('#bootstrapModalFullCalendar').fullCalendar('rerenderEvents');
                    })
                    .fail(function(jqXHR, textStatus, err) {
                        console.log('AJAX error response :', textStatus);
                    })
            }

        });
                /*updating values on next click */
                $('body').on('click', 'button.fc-next-button', function() {
                    var b = $('#bootstrapModalFullCalendar').fullCalendar('getDate');
                 //    alert(b.format('L'));
                    var date = b.format('L');
                    console.log('date '+date);
                    monthNumber=date.split('/')[0];
                    document.getElementById('calMonth').innerHTML= months[monthNumber-1]+' '+date.split('/')[2];
                    $('#Selectview').val('None');
                    $('#selproject').val('None');
                
                    $.ajax({ 
                        type: 'GET',
                        url: '/users/getNullevents',
                        data : {
                            'date': date
                        },
                        dataType: 'json'
                    })
                    .done(function( data ) {
                        console.log( "Sample of data:", data );
                    //  eventsData = data;
                        $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
                        $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', data);         
                        $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
                    })
                    .fail(function(jqXHR, textStatus, err){
                        console.log('AJAX error response :',textStatus);
                    })     
        });
        /*updating values on prev click */
        $('body').on('click', 'button.fc-prev-button', function() {
            var b = $('#bootstrapModalFullCalendar').fullCalendar('getDate');
           //alert(b.format('L'));
            var date = b.format('L');
            console.log('date '+date);
            monthNumber=date.split('/')[0];
            document.getElementById('calMonth').innerHTML= months[monthNumber-1]+' '+date.split('/')[2];
            $('#Selectview').val('None');
            $('#selproject').val('None');
        
            $.ajax({ 
                type: 'GET',
                url: '/users/getNullevents',
                data : {
                    'date': date
                },
                dataType: 'json'
            })
            .done(function( data ) {
                console.log( "Sample of data:", data );
            //  eventsData = data;
                $('#bootstrapModalFullCalendar').fullCalendar( 'removeEvents');
                $('#bootstrapModalFullCalendar').fullCalendar( 'addEventSource', data,{textColor : 'white'});         
                $('#bootstrapModalFullCalendar').fullCalendar( 'rerenderEvents' );
            })
            .fail(function(jqXHR, textStatus, err){
                console.log('AJAX error response :',textStatus);
            })     
        });
        /*Task Form post method */
        
        


        $('#taskForm').submit(function(e) {
            e.preventDefault();
            var values = $(this).serialize();
            console.log('values   ' + values);
            let aryData = $(this).serializeArray();
            
            var tempList = [];
            console.log(aryData);
            for(let j=0;j< aryData.length / 10; j++){
                let i = 10*j;
                let tempObj = {"taskname":aryData[i]?.value,"function":aryData[i+1]?.value,"tasktype":aryData[i+2]?.value,"projectname":aryData[i+4]?.value,"taskdate":aryData[i+5]?.value,"assignedresource":aryData[i+6]?.value,"status":aryData[i+7]?.value,"plannedstarttime":aryData[i+8]?.value,"plannedendtime":aryData[i+9]?.value,"deadline":aryData[i+3]?.value}; 
                tempList.push(tempObj);
            }
            console.log(tempList,'tempList');
            let flag = true;
            for(let i=0;i<tempList.length;i++){
                let dt = tempList[i];
                let date = new Date($('#datePicker').val());

                if(date > new Date()){
                    console.log('inside date',dt.deadline,dt);
                    if(dt.deadline.toLowerCase() == "select" || !dt.deadline){
                        callToast(`Please Select Deadline ${i+1}!`);
                        flag = false;
                        return;
                    }
                    else if(dt.deadline.toLowerCase() == 'deadlines') {
                        if(!dt.plannedendtime){
                        callToast(`Please Fill Planned End Time${i+1}!`);
                        flag = false;
                        return;
                    }
                    }
                    else if(dt.deadline.toLowerCase() == 'block time'){
                        if(!dt.plannedstarttime){
                        callToast(`Please Fill Planned Start Time${i+1}!`);
                        flag = false;
                        return;
                    }
                    }

                }
                
                if(!dt.taskname){
                    callToast(`Please enter Task Description ${i+1}!`);
                    flag = false;
                    return;
                }
                if(!dt.function){
                    callToast(`Please select Task function ${i+1}!`);
                    flag = false;
                    return;
                }
                if(!dt.tasktype){
                    callToast(`Please select Task Type ${i+1}!`);
                    flag = false;
                    return;
                }
                if(!dt.projectname){
                    callToast(`Please select Project ${i+1}!`);
                    flag = false;
                    return;
                }
                if(!dt.status || dt.status.toLowerCase() == 'none'  ){
                    callToast(`Please choose Status ${i+1}`);
                    flag = false;
                    return;
                }
                if(!dt.assignedresource || dt.assignedresource.toLowerCase() == 'none'  ){
                    callToast(`Please Assign Resource ${i+1}`);
                    flag = false;
                    return;
                }
                if(dt.deadline.toLowerCase() == "select"){
                    dt.deadline = '';
                }
                if(dt.plannedstarttime > dt.plannedendtime)
                {
                    callToast(`Actual Start Time should be less than Actual End Time. !`);
                    flag = false;
                    return;
                }

            }
           
           if(flag){
                $("#submitbutton").attr("disabled", true);
                $.ajax({
                        url: "/timesheets/createMultipletask",
                        type: "post",
                        data: JSON.stringify(tempList),
                        //dataType: 'json',
                        contentType: 'application/json',

                    })
                    .done((data) => {
                        console.log('data ' + JSON.stringify(data))
                        let resp = JSON.stringify(data);
                        console.log('dataaaaa' + resp);
                        if (data == 'Task saved Successfully') {
                            document.getElementById("taskForm").reset()
                            let errorHtml = '<div class="alert alert-success alert-dismissible fade show" role="alert">' + resp +
                                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                '<span aria-hidden="true">&times;</span>' +
                                '</button>' +
                                '</div>';
                            $('#errorMessages').empty();
                            $('#errorMessages').append(errorHtml);
                            $("#submitbutton").attr("disabled", false);
                            $('#createTaskModal').scrollTop(0);
                            window.setTimeout(function(){
                                 window.location.reload();
                            },5000);
                            
                        } else {
                            //document.getElementById("taskForm").reset()
                            let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + resp +
                                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                                '<span aria-hidden="true">&times;</span>' +
                                '</button>' +
                                '</div>';
                            $('#errorMessages').empty();
                            $('#errorMessages').append(errorHtml);
                            $("#submitbutton").attr("disabled", false);
                            // window.location.reload()
                        }
                    })
                    .fail((jqXHR, status, error) => {
                        console.log('jqXHR  : ' + JSON.stringify(jqXHR));
                        console.log('error  : ' + error);
                        let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + error +
                            '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                            '<span aria-hidden="true">&times;</span>' +
                            '</button>' +
                            '</div>';
                        $('#errorMessages').empty();
                        $('#errorMessages').append(errorHtml);
                        //   window.location.reload()
                    });
            
            }
            else{
                console.log('not run');
            }
            

        })


        function callToast(resp){
            let errorHtml = '<div class="alert alert-danger alert-dismissible fade show" role="alert">' + resp +
                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                '<span aria-hidden="true">&times;</span>' +
                '</button>' +
                '</div>';
            $('#errorMessages').empty();
            $('#errorMessages').append(errorHtml);
            $('#createTaskModal').scrollTop(0);
            $("#submitbutton").attr("disabled", false);
            window.setTimeout(function(){
                $('#errorMessages').html('');
            },2000);
        }


        $('#bootstrapModalFullCalendar').fullCalendar({
            header: {
                left: '',
                center: 'title',
                right: 'prev next'
            },
            eventClick:  function(event, jsEvent, view) {
                $('#modalTitle').html(event.title);
                $('#modalBody').html(event.description);
                $('#eventUrl').attr('href',event.url);
                $('#fullCalModal').modal();
                return false;
            },
            displayEventTime : false,
            allDay : true,
            firstDay: 1,
            textColor :'white',
           // nextDayThreshold: '00:00:00',
           eventClick: function(calEvent, jsEvent, view) {
                var dt = calEvent.start.format('YYYY-MM-DD');
                //alert(dt);
                var dateParts = dt.split('-');
                var selectedDate = dateParts[1]  + '/' + dateParts[2] + '/' + dateParts[0];
            //   alert(selectedDate); console.log('selectedDate   '+selectedDate);
                let seletedDate = new Date(selectedDate);
                console.log('seletedDate   '+seletedDate);
                let currentDate = new Date();
                console.log('currentDate  :  '+currentDate );
            //    let todaydate = new Date().getTime() +1296000000;
                let todaydate = new Date().getTime() +604800000;
                let tomoorow=new Date(todaydate);
                console.log('today plus 15 day= '+tomoorow);
              //  let before=new Date().getTime()-1296000000;
              let before=new Date().getTime()-604800000;
                let beforedate=new Date(before);
                console.log('15 day before today '+ beforedate);
                let selectProj = $('#selproject').val();
                selectedView = $('#Selectview').val();

                if(calEvent.title == 'Create Task')
                {
                     
                    console.log('calEvent.start '+calEvent.start);
                    $('.datepic').val(selectedDate);
                    $('.dynamicRow').each(function(){
                        if(this.id !== 'formRowTask1')
                            this.remove();
                    });
                    if(seletedDate.getTime() < currentDate.getTime())
                    {
                        $('.plannedstarttimeTask').css('pointer-events','none');
                        $('.plannedendtimeTask').css('pointer-events','none');
                        $('.deadline').css('pointer-events','none');
                        $('.plannedstarttimeTask').attr("readonly",true);
                        $('.plannedendtimeTask').attr("readonly",true);
                        $('.deadline').attr("readonly",true);
                    }
                    else
                    {
                        $('.deadline').css('pointer-events','visible');
                        $('.deadline').attr("readonly",false);
                        $('.plannedstarttimeTask').attr("readonly",true);
                        $('.plannedendtimeTask').attr("readonly",true);
                        $('.plannedstarttimeTask').css('pointer-events','none');
                        $('.plannedendtimeTask').css('pointer-events','none');
                       
                    }
                 //   if(seletedDate.getTime()<todaydate && seletedDate.getTime()>before)
                      if(seletedDate.getTime()>before)
                    {
                      console.log('objuser name++++'+objUserName);
                      console.log('objuserId ++++'+objUserId);
                      console.log('contactList ++++'+contactList.name);
                      $("#createTaskModal").modal("show");
                   //     $('#Selectview').on('change',function(){
                     console.log('Selected view ++ '+selectedView);
                         // selectedView=this.value;
                        console.log('hii i m inside current user view');
                        //$('.assignedresource').val('');

                        if(selectedView == 'currentuser')
                        {
                          $('.assignedresource').attr("readonly","readonly");
                          $('.assignedresource option').each(function() {
                                if ( $(this).val() != '' ) {
                                    $(this).remove();
                                }
                            });
                          $('.assignedresource')
                          .append($("<option></option>")
                          .attr("value",objUserId)
                          .text(objUserName)) 
                          $('.assignedresource').val(objUserId); 
                          $('.assignedresource').css('pointer-events','none');                       
                        }

                        if(selectedView == 'teamview')
                        {
                          console.log('hii i m inside team view');
                          $('.assignedresource').attr("readonly",false);
                          $('.assignedresource').css('pointer-events','none'); 
                          $('.assignedresource').val('');
                          $('.assignedresource option').each(function() {
                                if ( $(this).val() != '' ) {
                                    $(this).remove();
                                }
                            });
                          
                        }
                      
                    }
                    else{
                      alert('The timesheet tasks are locked. You cannot create task before 7 days from today date. !');
                    }
                    
                }
                else if(calEvent.title == 'Fill Actuals')
                {
                  
                   
                
                    if(seletedDate.getTime() > currentDate.getTime())
                    {
                          $('.editIcon').css('display','none');
                    }
                    else{
                        //$('.editIcon').css('display','block');
                    }
                    
                    {
                        window.saveDom = jsEvent;
                        window.editIndex.length = 0;
                        $('#Allcheckbox').prop('checked',false);
                        
                        if (selectProj == 'allproject' && selectedView == 'currentuser') {
                            console.log(seletedDate,seletedDate.toLocaleDateString());
                            $.ajax({ 
                            type: 'GET',
                            url: '/timesheets/getTasklist',  
                            data : {date:seletedDate.toLocaleDateString()},
                            dataType: 'json'     
                            })
                            .done(resp=>{
                                loadDataOnClick(resp);
                                
                            })
                            .fail(console.log);
                            
                        } else if (selectProj == 'allproject' && selectedView == 'teamview') {
                            //   alert("team view & all project");
                            $.ajax({
                                    type: 'GET',
                                    url: '/timesheets/getTeamsProject',
                                    data: {
                                        'date': seletedDate.toLocaleDateString()
                                    },
                                    dataType: 'json'
                                })
                                .done(function(data) {
                                    loadDataOnClick(data);
                                })
                                .fail(function(jqXHR, textStatus, err) {
                                    console.log('AJAX error response :', textStatus);
                                })
                        } else if (selectProj != 'allproject' && selectedView == 'currentuser') {
                            console.log('selected project for current User ' + selectProj);
                            $.ajax({
                                    type: 'GET',
                                    url: '/timesheets/getProjectById',
                                    data: {
                                        'projectId': selectProj,
                                        'date': seletedDate.toLocaleDateString()
                                    },
                                    dataType: 'json'
                                })
                                .done(function(data) {
                                    loadDataOnClick(data);
                                })
                                .fail(function(jqXHR, textStatus, err) {
                                    console.log('AJAX error response :', textStatus);
                                })
                        } else if (selectProj != 'allproject' && selectedView == 'teamview') {
                            $.ajax({
                                    type: 'GET',
                                    url: '/timesheets/getTeamsProject',
                                    data: {
                                        'projectId': selectProj,
                                        'date': seletedDate.toLocaleDateString()
                                    },
                                    dataType: 'json'
                                })
                                .done(function(data) {
                                    loadDataOnClick(data);
                                })
                                .fail(function(jqXHR, textStatus, err) {
                                    console.log('AJAX error response :', textStatus);
                                })
                        }

                        function loadDataOnClick(resp){
                            console.log(resp);
                            document.getElementById('fillActualtBody').innerHTML = '';
                            resp.forEach((dt,i)=>{
                                let temp = document.getElementById('dummyTableBody').innerHTML;
                                temp = temp.replaceAll('{index}',i);
                                temp = temp.replaceAll('{projectname}',dt.projectname);
                                let tn = dt.name;
                                tn = tn.replace('href="#"',`href="/timesheets/taskListView?id=${dt.id}&isOpen=true" target="_blank"`);
                                temp = temp.replaceAll('{taskname}',tn);
                                let strDate = new Date(dt.plandate);
                                temp = temp.replaceAll('{taskdate}',`${strDate.getFullYear()}-${strDate.getMonth()+1}-${strDate.getDate()}`);
                                temp = temp.replaceAll('{tasktype}',dt.taskType);
                                temp = temp.replaceAll('{startTime}',dt.startTime);
                                temp = temp.replaceAll('{function}',dt.function);
                                temp = temp.replaceAll('{endTime}',dt.endtime);
                                temp = temp.replaceAll('{description}','');
                                temp = temp.replaceAll('{AstartTime}','');
                                temp = temp.replaceAll('{recId}',dt.id);
                                temp = temp.replaceAll('{object}', utoa(dt));  
                                temp = temp.replaceAll('{AendTime}','');
                                temp = temp.replaceAll('{pHours}',dt.hrs);
                                temp = temp.replaceAll('{aHours}',dt.actualHours);
                                temp = temp.replaceAll('{currentuser}',dt.assigned);
                                temp = temp.replaceAll('{sfdcUser}','');
                                temp = temp.replaceAll('{dummy}','');
                                let list = document.getElementById('fillActualtBody');
                                list.innerHTML = list.innerHTML + temp;
                                
                            });
                            let currentUser = <%- JSON.stringify(objUserId) %>;
                            console.log('qqwww',currentUser);
                            resp.forEach((dt,i)=>{
                                if(dt.userId != currentUser){
                                    $('.editIconId'+i).css('display','none');
                                    $('#addBtns'+i).prop('disabled',true);
                                }
                                else if( ! (seletedDate.getTime() > currentDate.getTime()))
                                { 
                                    $('.editIconId'+i).css('display','block');
                                    $('#addBtns'+i).prop('disabled',false);
                                }
                                else if((seletedDate.getTime() > currentDate.getTime())) {
                                    $('.editIconId'+i).css('display','none');
                                    $('#addBtns'+i).prop('disabled',true);
                                }
                                $('#taskSelect'+i).val(dt.status);
                            });

                            $("#fillActualsModal").modal("show");
                            $('#deleteRec').unbind('click');
                            $('#deleteRec').click(function(){
                                let list = [];
                                 $('.chckbox').each(function(e){
                                    if($(this).is(":checked")){
                                       list.push($(this)[0].dataset.label); 
                                    }  
                                 });
                                 console.log(list);
                                 if(  confirm('Are you sure to Delete this record')  && list.length > 0){
                                    console.log('inside');
                                    $.ajax({
                                            url : '/timesheets/deleteMultipleTask',
                                            data : JSON.stringify(list),
                                            type : 'post',
                                            contentType: 'application/json',
                                    })
                                        .done((response) => {
                                            console.log(response);
                                            window.saveDom.target.click();
                                            $('#deleteRec').prop('disabled',true);

                                        })
                                        .fail(resp=>{
                                            alert('Some Error occured');
                                        });
                                 }

                            });
                            $('#Allcheckbox').unbind('change');
                            $('#Allcheckbox').change(function(){
                                var status = $(this).is(":checked") ? true : false;
                                $(".chckbox").prop("checked",status);
                                if(status){
                                    $('#deleteRec').prop('disabled',false);
                                }
                                else{
                                    $('#deleteRec').prop('disabled',true);
                                }
                            });
                            if( ! (seletedDate.getTime() > currentDate.getTime()))
                            {
                                  //$('.editIcon').css('display','block');
                            }
                            
                            $('.editIcon').unbind('click');
                            $('.editIcon').click(function(){
                                let index = this.dataset.label;
                                if(!window.editIndex.includes(index))
                                    window.editIndex.push(index);
                                 $('#taskSelect'+index).prop('disabled',false);
                                $('#descp'+index).prop('disabled',false);
                                $('#actualSt'+index).prop('disabled',false);
                                $('#actualEd'+index).prop('disabled',false);
                                console.log(index);
                            });
                            $('#submitbuttonnn').unbind('click');
                            $('#submitbuttonnn').click(function(){
                                let indexList = window.editIndex;
                                let tempO = {ast:0,pEnd:0};
                                let listData = [];
                                indexList.forEach(dt=>{
                                   let obj =  $('#addBtns'+dt)[0].dataset.value;
                                   let temp = {};
                                   let objs = atou(obj);
                                   temp.status = $('#taskSelect'+dt).val();
                                   if($('#actualSt'+dt).val()){
                                        temp.actualStart =  $('#actualSt'+dt).val();
                                   }
                                   else {
                                        tempO.ast++ ;
                                        temp.actualStart = '';
                                   }
                                   
                                   temp.descp = $('#descp'+dt).val();
                                   if($('#actualEd'+dt).val()){
                                        temp.actualEnd = $('#actualEd'+dt).val();
                                   }
                                   else{
                                         tempO.pEnd++;
                                         temp.actualEnd = '';
                                   }
                                   temp.proId = objs.proId;
                                   temp.taskId = objs.id;
                                   temp.user = objs.userId;
                                   let strDate = new Date(objs.createDdate);
                                   temp.date = `${strDate.getFullYear()}-${strDate.getMonth()+1}-${strDate.getDate()}`;
                                   listData.push(temp);
                                });
                                for(let j=0;j<listData.length;j++){
                                    let obj = listData[j];
                                    var startDate = obj.actualStart;
                                    console.log('startTime '+startDate);
                                    var endDate = obj.actualEnd;
                                        console.log('endTime '+endDate);
                                       if(startDate == '')
                                        {
                                            callToastForError('Error: Please Fill Actual Start Time','danger','errorMessagesss');
                                            $('#fillActualsModal').scrollTop(0);
                                          //alert('Error: Please Fill Actual Start Time');
                                          return;
                                        }
                                      
                                      else if(endDate == '')
                                        {
                                            callToastForError('Error: Please Fill Actual End Time','danger','errorMessagesss');
                                             $('#fillActualsModal').scrollTop(0);
                                          //alert('Error: Please Fill Actual End Time');
                                          return;
                                        }
                                       else if(startDate > endDate)
                                        {
                                            callToastForError('Error: Actual Start Time should be less than Actual End Time. !','danger','errorMessagesss');
                                             $('#fillActualsModal').scrollTop(0);
                                          //alert('Error: Actual Start Time should be less than Actual End Time. !');
                                          return;
                                        }
                                }

                                console.log(listData);
                                if(tempO.ast == 0 && tempO.pEnd == 0  ){
                                    if(listData.length > 0){
                                        $('#submitbuttonnn').prop('disabled',true);
                                        $.ajax({
                                                url : '/timesheets/fillactualsTimeSheet',
                                                data : JSON.stringify(listData),
                                                type : 'post',
                                                contentType: 'application/json',
                                        })
                                            .done((response) => {
                                                console.log(response);
                                                callToastForError('Timesheet saved Successfully','success','errorMessagesss');
                                                $('#fillActualsModal').scrollTop(0);
                                                window.setTimeout(function(){
                                                    //window.location.reload();
                                                    window.saveDom.target.click();
                                                    $('#closeTimeModal').click();

                                                },2500);
                                                

                                            })
                                            .fail(resp=>{
                                                $('#submitbuttonnn').prop('disabled',false);
                                                alert('Some Error occured');
                                            });
                                    }
                                }
                                else{
                                    callToastForError('Please Enter ACTUAL START TIME Or ACTUAL END TIME','danger','errorMessagesss');
                                     $('#fillActualsModal').scrollTop(0);
                                    //alert('Please Enter ACTUAL START TIME Or ACTUAL END TIME');
                                }

                            });

                             $('.chckbox').unbind('change');
                            $('.chckbox').change(function(){

                                let count = 0;
                                let flag = false;
                                $('.chckbox').each(function(){
                                    let t = $(this).is(":checked");
                                    if(t){
                                       count++;
                                       flag = true;
                                    }
                                    else{
                                        count--;
                                    }
                                })
                                if(!flag){
                                    $('#deleteRec').prop('disabled',true); 
                                }
                                if(flag){
                                    $('#deleteRec').prop('disabled',false); 
                                }
                                if($('.chckbox').length == count){
                                    $("#Allcheckbox").prop("checked",true);
                                }
                                else{
                                    $("#Allcheckbox").prop("checked",false);
                                }
                            });
                            $('#timeSheetBtn').unbind('click');
                            $('#timeSheetBtn').click(function(){
                                let htmText = $('#dummyTaskRow').html();
                                console.log(htmText);
                                let s = $('#taskModalBody');
                                if(htmText){
                                    let index = s.children().length + 1;
                                    htmText = htmText.replaceAll('{index}',index);
                                    s.append(htmText);
                                    $('#project'+index).val($('#project0').val());
                                    $('#dateIncurred'+index).val($('#dateIncurred0').val());
                                    $('#task'+index).val($('#task0').val());
                                    $('#user'+index).val($('#user0').val());
                                    $('#selectTime'+index).val($('#selectTime0').val());
                                    window.editIndex.push(index);

                                }

                            });
                            $('#SaveBtnTime').unbind('click');
                            $('#SaveBtnTime').click(function(){
                                let indexList = window.editIndex;
                                let tempO = {ast:0,pEnd:0};
                                let obj = $('#SaveBtnTime').val();
                                let objs = atou(obj);
                                let listData = [];
                                indexList.forEach(dt=>{
                                   let temp = {};
                                   temp.status = $('#selectTime'+dt).val();
                                   if($('#startTime'+dt).val()){
                                        temp.actualStart =   $('#startTime'+dt).val();
                                   }
                                   else{
                                        temp.actualStart = '';
                                        tempO.ast++ ;
                                   }

                                    
                                   temp.descp = $('#descriptionTimesheet'+dt).val();
                                   if($('#endTime'+dt).val()){
                                        temp.actualEnd =   $('#endTime'+dt).val();
                                   }
                                   else{
                                        temp.actualEnd = '';
                                        tempO.pEnd++;
                                   }
                                   temp.proId = objs.proId;
                                   temp.taskId = objs.id;
                                   temp.user = objs.userId;
                                   let strDate = new Date(objs.createDdate);
                                   temp.date = `${strDate.getFullYear()}-${strDate.getMonth()+1}-${strDate.getDate()}`;
                                   listData.push(temp);
                                });
                                 for(let j=0;j<listData.length;j++){
                                    let obj = listData[j];
                                    var startDate = obj.actualStart;
                                    console.log('startTime '+startDate);
                                    var endDate = obj.actualEnd;
                                        console.log('endTime '+endDate);
                                       if(startDate == '')
                                        {
                                          //alert('Error: Please Fill Actual Start Time');
                                          callToastForError('Error: Please Fill Actual Start Time','danger','errorMessageTask');
                                          $('#taskModal').scrollTop(0);
                                          return;
                                        }
                                      
                                      else if(endDate == '')
                                        {
                                            callToastForError('Error: Please Fill Actual End Time','danger','errorMessageTask');
                                            $('#taskModal').scrollTop(0);
                                          //alert('Error: Please Fill Actual End Time');
                                          return;
                                        }
                                       else if(startDate > endDate)
                                        {
                                            callToastForError('Error: Actual Start Time should be less than Actual End Time. !','danger','errorMessageTask');
                                            $('#taskModal').scrollTop(0);
                                          //alert('Error: Actual Start Time should be less than Actual End Time. !');
                                          return;
                                        }
                                }
                                console.log(listData);
                                if(tempO.ast == 0 && tempO.pEnd == 0  ){
                                    if(listData.length > 0){
                                        $('#SaveBtnTime').prop('disabled',true);
                                        $.ajax({
                                                url : '/timesheets/fillactualsTimeSheet',
                                                data : JSON.stringify(listData),
                                                type : 'post',
                                                contentType: 'application/json',
                                        })
                                            .done((response) => {
                                                console.log(response);
                                                callToastForError('Timesheet saved Successfully','success','errorMessageTask');
                                                $('#taskModal').scrollTop(0);
                                                window.setTimeout(function(){
                                                    window.location.reload();
                                                },1500);
                                                

                                            })
                                            .fail(resp=>{
                                                $('#SaveBtnTime').prop('disabled',false);
                                                alert('Some Error occured');
                                            });
                                    }
                                }
                                else{
                                        callToastForError('Please Enter ACTUAL START TIME Or ACTUAL END TIME','danger','errorMessageTask');
                                            $('#taskModal').scrollTop(0);
                                    //alert('');
                                }
                            });


                        }
                           
                    }
                }
              
            } 
        });
        var colorStyle = document.getElementsByClassName('fc-title');
        for (var i=0; i<colorStyle.length; i++) {
            colorStyle[i].style.color = 'white';
        }
    });

function handleChange(e){
        var value = e.target.value.trim();
        var index = e.target.dataset.label;
        if(!index){
            index = '';
        }
        console.log(index);
        var taskType = <%- JSON.stringify(taskType) %>;
        var data = taskType[value];
        if(data && data.length > 0){
            $('#tasktype'+index).find('option').remove().end();
            $('#tasktype'+index).attr('disabled',false);
             $('#tasktype'+index).append('<option value="">None</option>');
            data.forEach((dt)=>{
                $('#tasktype'+index).append(`<option value="${dt}">${dt}</option>`);
                $('#tasktype'+index).attr('readonly',false);
                $('#tasktype'+index).css('pointer-events','visible');
            });
        }
        else {
            $('#tasktype'+index).find('option').remove().end().append(`<option value="">None</option>`);
            $('#tasktype'+index).attr('readonly',true);
            $('#tasktype'+index).css('pointer-events','none');
        }
    }


    function callToastForError(resp,types,id){
            let errorHtml = '<div class="alert alert-'+types +' alert-dismissible fade show" role="alert">' + resp +
                '<button type="button" class="close" data-dismiss="alert" aria-label="Close">' +
                '<span aria-hidden="true">&times;</span>' +
                '</button>' +
                '</div>';
            $('#'+id).empty();
            $('#'+id).append(errorHtml);
            window.setTimeout(function(){
                $('#'+id).html('');
            },3000);
        }


    function utoa(str) {
    return window.btoa(unescape(encodeURIComponent(JSON.stringify(str))));
    }
    
    function atou(str) {
        return JSON.parse(decodeURIComponent(escape(window.atob(str))));
    }



</script>





<!-- Create Task Modal -->
<div id="createTaskModal" class="modal fade bs-example-modal-lg" tabindex ="-1" role="dialog" aria-labelledby="myLargeModalLabel" >
<div class="modal-dialog modal-lg" role="document">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title" id="createTaskModal">Create Multiple Task</h5>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body">
      <div class="">
        <div id="errorMessages"></div>
      <form  id="taskForm" class="needs-validation" novalidate >
        <div id="taskformRow" >
            <div id="formRowTask1" class="dynamicRow" >
                <div  style="font-weight: bold;margin: 5px 0 30px 0;font-family: system-ui;">New Task 1</div>
                <div class="form-group">  
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip01">Task Description <span style="color: red;">*</span></label>
                      <input type="text" class="form-control" id="validationTooltip01" placeholder=""  name="taskname" required>
                    </div>
                   
                    <div class="col-md-6">
                      <label for="validationTooltip02">function<span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control" onchange="handleChange(event);" id="function" name="function">
                          <option selected value=''>None</option>
                          <option value="Accounts">Accounts </option>
                          <option value="Compliance">Compliance</option>
                          <option value="Content">Content </option>
                          <option value="HR">HR</option>
                          <option value="IT_Support">IT Support</option>
                          <option value="Learning_Development">Learning & Development</option>
                          <option value="Operations">Operations</option>
                          <option value="Project">Project</option>
                          <option value="Self_Management">Self Management</option>
                          <option value="Beneficiary">Beneficiary Engagement</option>
                          <option value="Internal">Internal - LLF</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                      <div class="col-md-6">
                           <label for="validationTooltip03">Task Type <span style="color: red;">*</span></label>
                            <select class="custom-select custom-select-sm form-control" readonly style="pointer-events:none" id="tasktype" name="tasktype">
                                <option value=''>None</option>
                            </select>
                      </div>
                      <div class="col-md-6">
                          <label for="validationTooltipUsername">Deadline Type<span style="color: red;">*</span></label>
                          <select class="custom-select custom-select-sm form-control deadline" id="deadline" name="deadline" >
                            <option selected>Select</option>
                            <option value="Deadlines">Deadlines</option>
                            <option value="Block Time">Block Time</option>
                          </select>
                    </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                  <div class="col-md-6">
                    <label for="validationTooltip03">Project <span style="color: red;">*</span></label>
                    <select class="custom-select custom-select-sm form-control" onchange="handleProject(event)" name="projectname">
                      <option value="" >None</option>
                      <% if(projectList.length != 0) { %>
                       <% projectList.forEach((eachProject) => { %>
                       <option value="<%= eachProject.sfid %>" ><%= eachProject.name %></option>
                       <% }) %>
                      <% } %>
                   </select>
                  </div>
                  <div class="col-md-6">
                    <label for="validationTooltip04">Task Date</label>
                    <input type="text" class="form-control datepic"   id="datePicker" required readonly name="taskdate">
                    
                  </div>
                </div>
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Assign to Heroku user <span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control assignedresource" name="assignedresource" id="assignedresource">
                        <option value="">None</option>
                       </select>


                    </div>

                    <div class="col-md-6">
                        <label for="validationTooltipUsername">Status <span style="color: red;">*</span></label>
                        <select class="custom-select custom-select-sm form-control" name="status" >
                             <option selected>None</option>
                             <option value="Started">Started</option>
                             <option value="On Hold">On Hold</option>
                             <option value="Completed">Completed</option>
                        </select>
                    </div>
                  </div>  
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned Start Time</label>
                      <input type="time" class="form-control plannedstarttimeTask" id="plannedstarttimeTask" name="plannedstarttime" required>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned End Time</label>
                      <input type="time" class="form-control plannedendtimeTask" id="plannedendtimeTask" name="plannedendtime" required>
                    </div>
                  </div>  
                </div>

                
            </div>
        </div>
        <div class="modal-footer">
          <button type="button" id="newRowBtn" style="background: #3a87ad;" class="btn btn-primary"> Add New Task Row</button>
          <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
          <button type="submit" id="submitbutton" class="btn btn-primary">Save</button>
        </div>

      </form>
    </div>
    </div>
  </div>
</div>
</div>

<script>
    bindEvent();

    function handleCurrentUser(){
        let selectedView = $('#Selectview').val();
        let objUserName = document.getElementById('objname').innerHTML; 
        let objUserId = document.getElementById('objUserId').innerHTML; 
        if(selectedView == 'currentuser')
        {
          $('.assignedresource').attr("readonly","readonly");
          $('.assignedresource option').each(function() {
                if ( $(this).val() != '' ) {
                    $(this).remove();
                }
            });
          $('.assignedresource')
          .append($("<option></option>")
          .attr("value",objUserId)
          .text(objUserName)) 
          $('.assignedresource').val(objUserId); 
          $('.assignedresource').css('pointer-events','none');                       
        }

    }


    function handleProject (event){
        let index = event.target.dataset.label;
        let value = event.target.value;
        if(index == 'undefined' || index == '' || index == null)
            index = '';
        console.log(value,index);
        let selectedView = $('#Selectview').val();
        
//heroku logs -t --app learninglinksfoundation-test
        if(selectedView == 'teamview')
        {
          console.log('hii i m inside team view');
          $('#assignedresource'+index).attr("readonly",false);
          $('#assignedresource'+index).css('pointer-events','visible');  
          $('#assignedresource'+index).val(''); 
          $.ajax({
                url : '/users/getProjectMemeber',
                data : {
                  projectId : value
                },
                dataType : 'json',
                type : 'get'
           })
            .done((response) => {
                console.log('response  ',response);
                    $('#assignedresource' +index+' option:not(:first)').remove();
                    response.forEach((eachContact) => {
                    console.log('eachContact.name '+eachContact);
                    $('#assignedresource'+index)
                    .append($("<option></option>")
                    .attr("value",eachContact.sfid)
                    .text(eachContact.name))
                    }); 
                    
            })
            .fail((jqXHR,text,err) => {
                console.log('text  '+text + '  err '+err);
                console.log('jqXHR '+JSON.stringify(jqXHR));

            }) 


        }
    }


    $('#newRowBtn').click(function() {
       
        let datePic = $('#datePicker').val();
        var ele = document.getElementsByClassName('dynamicRow');
        var dummyRecord = document.getElementById('dummyRecord').cloneNode(true);
        var insideData = $('#taskformRow');
        insideData.append(`<div class="dynamicRow" id="formRowTask${ele.length + 1}">` + dummyRecord.innerHTML.replaceAll('{data}',ele.length + 1) + '</div>'); 
        $('.datepic').val(datePic);
        handleCurrentUser();
        bindEvent();
    });
    function bindEvent(){
         $('.recordD').unbind('click');
        $('.deadline').unbind('change');

    $('.recordD').click(function(e){
        console.log('running');
        var index = e.target.dataset.label;
        console.log('running',index);
        var dummyRecord = document.getElementById('formRowTask'+index);
        dummyRecord.remove();
        let parent = document.getElementById('taskformRow');
        let child = Array.from(parent.children);
        console.log('before etc ');
        child.forEach((dt,i)=>{
            if(index <= i+1){
                let d =  dt.innerHTML ;
                d =  d.replaceAll('function'+(i+2),'function'+(i+1));
                d =  d.replaceAll('New Task '+(i+2),'New Task '+(i+1));
                d =  d.replaceAll('taskname'+(i+2),'taskname'+(i+1));
                d =  d.replaceAll('deadline'+(i+2),'deadline'+(i+1));
                d =  d.replaceAll('plannedendtime'+(i+2),'plannedendtime'+(i+1));
                d =  d.replaceAll('plannedstarttime'+(i+2),'plannedstarttime'+(i+1));
                d =  d.replaceAll('status'+(i+2),'status'+(i+1));
                d =  d.replaceAll('assignedresource'+(i+2),'assignedresource'+(i+1));
                d =  d.replaceAll('taskdate'+(i+2),'taskdate'+(i+1));
                d =  d.replaceAll('projectname'+(i+2),'projectname'+(i+1));
                d =  d.replaceAll('tasktype'+(i+2),'tasktype'+(i+1));
                d =  d.replaceAll('data-label="'+(i+2),'data-label="'+(i+1));
                dt.setAttribute('id','formRowTask'+(i+1));
                dt.innerHTML = d;
                console.log('handle thses ',i+1);
            }
            
        });
        
        //bindEvent();
        console.log('done');
    });
    $('.deadline').unbind('change');
    $('.deadline').on('change',function(){
        let deadValue=this.value;
        let id = this.id;
        let index = id.replace('deadline','');
        console.log(index,id,'  qqqqq');
        
            if(deadValue=='Deadlines')
            {
                $('#plannedstarttimeTask'+index).css('pointer-events','visible');
                $('#plannedendtimeTask'+index).css('pointer-events','visible');
                $('#plannedstarttimeTask'+index).attr("readonly",false);
                $('#plannedendtimeTask'+index).attr("readonly",false);
            }
            else if(deadValue=='Block Time'){
                 $('#plannedstarttimeTask'+index).css('pointer-events','visible');
                $('#plannedendtimeTask'+index).css('pointer-events','visible');
                $('#plannedstarttimeTask'+index).attr("readonly",false);
                $('#plannedendtimeTask'+index).attr("readonly",false);
            }
            else
            {
                $('#plannedstarttimeTask'+index).css('pointer-events','none');
                $('#plannedendtimeTask'+index).css('pointer-events','none');
                $('#plannedstarttimeTask'+index).attr("readonly",true);
                $('#plannedendtimeTask'+index).attr("readonly",true);
            }
        
        
            if(deadValue=='Deadlines')
            {
                $('#plannedstarttimeTask'+index).css('pointer-events','none');
                $('#plannedendtimeTask'+index).css('pointer-events','visible');
                $('#plannedstarttimeTask'+index).attr("readonly",true);
                $('#plannedendtimeTask'+index).attr("readonly",false);
            }
            else if(deadValue=='Block Time'){
                 $('#plannedstarttimeTask'+index).css('pointer-events','visible');
                $('#plannedendtimeTask'+index).css('pointer-events','visible');
                $('#plannedstarttimeTask'+index).attr("readonly",false);
                $('#plannedendtimeTask'+index).attr("readonly",false);
            }
            else
            {
                $('#plannedstarttimeTask'+index).attr("readonly",true);
                $('#plannedendtimeTask'+index).attr("readonly",true);
                $('#plannedstarttimeTask'+index).css('pointer-events','none');
                $('#plannedendtimeTask'+index).css('pointer-events','none');
            }
        
        
        //bindEvent();

    });
}


function handleTimeSheet(event){
    let dt = event.target.dataset.label;
    let tmp = event.target.dataset.value;
    let obj = atou(tmp);
    $('#SaveBtnTime').val(tmp);
    let date = new Date(obj.plandate);
    $('#project0').val(obj.projectname);
    $('#dateIncurred0').val(`${date.getFullYear()}-${date.getMonth()+1}-${date.getDate()}`);
    $('#task0').val(obj.taskName);
    $('#user0').val(obj.assigned);
    $('#selectTime0').val(obj.status);
    $('#startTime0').val('');
    $('#endTime0').val('');
    $('#descriptionTimesheet0').val('');
    let s = $('#taskModalBody');
    if(s.children().length > 1)
        s.children()[1].remove();
    $('#taskModal').modal("show");
    if(!window.editIndex.includes('0'))
        window.editIndex.push('0');
}

function handleDeleteTime(e){
    let index = e.target.dataset.label;
    console.log(index);
    let obj = $('#taskModalBodyRow'+index);
    obj.remove();
    Array.from(obj.children()).forEach((dt,i)=>{
        if(i >= index){
            let str = dt.innerHTML;
            str = str.replaceAll('Task '+(i+1),'Task '+i);
            str = str.replaceAll('project'+(i+1),'project'+i);
            str = str.replaceAll('dateIncurred'+(i+1),'dateIncurred'+i);
            str = str.replaceAll('task'+(i+1),'task'+i);
            str = str.replaceAll('selectTime'+(i+1),'selectTime'+i);
            str = str.replaceAll('endTime'+(i+1),'endTime'+i);
            str = str.replaceAll('startTime'+(i+1),'startTime'+i);
            str = str.replaceAll('user'+(i+1),'user'+i);
            str = str.replaceAll('descriptionTimesheet'+(i+1),'descriptionTimesheet'+i);
            dt.setAttribute('id','taskModalBodyRow'+i);
            dt.innerHTML = str;
        }

    });
    let ss = window.editIndex.filter(dt=> dt != index);
    window.editIndex = ss;
}

function callRemover(){
    if(window.editIndex.includes('0'))
        window.editIndex.pop();
}


</script>


<!-- Fill Actuals  Modal -->
<div id="fillActualsModal" class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
<div class="modal-dialog modal-lg" role="document">
  <div class="modal-content">
    <div class="modal-header">
      <h5 class="modal-title" id="fillActualsModals">Project Tasks Detail</h5>
      <button type="button" class="close" data-dismiss="modal" aria-label="Close">
        <span aria-hidden="true">&times;</span>
      </button>
    </div>
    <div class="modal-body"  >
      <div class="">
        <div id="errorMessagesss"></div>
            <div style=" overflow: auto;">
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">ADD MULTIPLE TIMESHEETS</th>
                            <th> <input style="height: 14px; width: 14px;" type="checkbox" id="Allcheckbox" /> </th>
                            <th scope="col">PROJECT NAME</th>
                            <th scope="col">TASK NAME</th>
                            <th scope="col">TASK DATE</th>
                            <th scope="col">STATUS  </th>
                            <th scope="col">FUNCTION</th>
                            <th scope="col">TASK TYPE</th>
                            <th scope="col">PLANNED START TIME</th>
                            <th scope="col">PLANNED END TIME</th>
                            <th scope="col">DESCRIPTION</th>
                            <th scope="col">ACTUAL START TIME</th>
                            <th scope="col">ACTUAL END TIME</th>
                            <th scope="col">PLANNED HOURS  </th>
                            <th scope="col">ACTUAL HOURS  </th>
                            <th scope="col">ASSIGNED TO HEROKU USER  </th>
                            
                        </tr>
                    </thead>
                    <tbody id="fillActualtBody" >
                       
                        
                    </tbody>
                </table>
            </div>
               
               <div class="modal-footer">
                  <button type="button" class="btn btn-warning" disabled id="deleteRec">Delete</button>
                  <button type="button" class="btn btn-danger" id="closeTimeModal" data-dismiss="modal">Close</button>
                  <button type="button" class="btn btn-primary" id="submitbuttonnn">Save</button>
               </div>
            
      </div>
    </div>
    
  </div>
</div>
</div>


 <!-- Task Modal -->

<div id="taskModal" class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel">
    <div class="modal-dialog modal-lg" role="document">
      <div class="modal-content">
        <div class="modal-header">
          <center><h5 class="modal-title" id="taskModalHead">Fill Timesheet</h5></center> 
          <button type="button" class="close" onclick="callRemover()" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div style="margin: 15px 0 0 15px;" id="errorMessageTask"></div>
        <div class="modal-body" id="taskModalBody" style="overflow-y: auto;">
            
            <div id="taskModalBodyRow1" > 
                <h5 style="font-weight: bold;font-family: auto;margin-bottom: 10px;" > Task 1 </h5>  
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="validationTooltip01">Project<span style="color: red;">*</span></label>
                            <input class="form-control" type="text" id="project0" readonly required />
                        </div>
                        <div class="col-md-6">
                            <label for="validationTooltip04">Date Incurred</label>
                            <input type="text" class="form-control datepic dateIncurred"  id="dateIncurred0" readonly name="dateIncurred" required> </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="selectedTask">Task Name <span style="color: red;">*</span></label>
                            <input type="text" class="form-control" id="task0" readonly required />
                        </div>
                        <div class="col-md-6">
                            <label for="validationTooltipUsername">Status <span style="color: red;">*</span></label>
                            <select class="custom-select custom-select-sm form-control" id="selectTime0" disabled name="statusTimesheet">
                                <option selected>None</option>
                                <option value="Started">Started</option>
                                <option value="On hold">On Hold</option>
                                <option value="Completed">Completed</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        <div class="col-md-6">
                            <label for="validationTooltip02">Actual Start Time <span style="color: red;">*</span></label>
                            <input type="time" class="form-control" data-label="0"  id="startTime0" placeholder="Last name"  name="plannedStartTimeTimesheet" required> </div>
                        <div class="col-md-6">
                            <label for="validationTooltip02">Actual End Time <span style="color: red;">*</span></label>
                            <input type="time" class="form-control" data-label="0"  id="endTime0" placeholder="Last name"  name="plannedEndTimeTimesheet" required> </div>
                        </div>
                </div>
                <div class="form-group">
                    <div class="row">
                        
                        <div class="col-md-6">
                            <label>Incurred By User</label>
                            <input type="text" class="form-control" id="user0" readonly required />
                        </div>
                        <div class="col-md-6">
                            <label for="validationTooltip02">Description </label>
                            <textarea class="form-control" class="form-control" id="descriptionTimesheet0" rows="3" autocomplete="off" name="descriptionTimesheet"></textarea>
                        </div>
                    </div>
                </div>
              
            </div>
        </div>
        <div class="modal-footer">
          <button type="button" id="timeSheetBtn" style="background: #3a87ad;" class="btn btn-primary"> Add New Row</button>
          <button type="button" class="btn btn-danger" onclick="callRemover()" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" id="SaveBtnTime">Save</button>
        </div>
      </div>
    </div>
</div>






<!-- Dummy timeSheet -->

<div id="dummyTaskRow" style="display:none;opacity:0" >
    <div id="taskModalBodyRow{index}" style="margin-top: 30px;"> 
        <i class="fa fa-trash timeDel" onclick="handleDeleteTime(event)" data-label="{index}" style="float: right; color: white; background: #116288; padding: 9px; border-radius: 5px;font-size: 14px; cursor: pointer;"></i>
        <h5 style="font-weight: bold;font-family: auto;margin-bottom: 10px;" > Task {index} </h5>  
            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label for="validationTooltip01">Project<span style="color: red;">*</span></label>
                        <input class="form-control" type="text" id="project{index}" readonly required />
                    </div>
                    <div class="col-md-6">
                        <label for="validationTooltip04">Date Incurred</label>
                        <input type="text" class="form-control datepic dateIncurred"  id="dateIncurred{index}" readonly name="dateIncurred" required/> </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label for="selectedTask">Task Name <span style="color: red;">*</span></label>
                        <input type="text" class="form-control" id="task{index}" readonly required />
                    </div>
                    <div class="col-md-6">
                        <label for="validationTooltipUsername">Status <span style="color: red;">*</span></label>
                        <select class="custom-select custom-select-sm form-control" id="selectTime{index}" disabled name="statusTimesheet">
                            <option selected>None</option>
                            <option value="Started">Started</option>
                            <option value="On hold">On Hold</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label for="validationTooltip02">Actual Start Time <span style="color: red;">*</span></label>
                        <input type="time" class="form-control" data-label="{index}"  id="startTime{index}" placeholder="Last name" name="plannedStartTimeTimesheet" required> </div>
                    <div class="col-md-6">
                        <label for="validationTooltip02">Actual End Time <span style="color: red;">*</span></label>
                        <input type="time" class="form-control" data-label="{index}"  id="endTime{index}" placeholder="Last name" name="plannedEndTimeTimesheet" required> </div>
                    </div>
            </div>
            <div class="form-group">
                <div class="row">
                    
                    <div class="col-md-6">
                        <label>Incurred By User</label>
                        <input type="text" class="form-control" id="user{index}" readonly required />
                    </div>
                    <div class="col-md-6">
                        <label for="validationTooltip02">Description</label>
                        <textarea class="form-control" class="form-control" id="descriptionTimesheet{index}" rows="3" autocomplete="off" name="descriptionTimesheet"></textarea>
                    </div>
                </div>
            </div>
          
        </div>
</div>





<div style="display:none;opacity:0" >
    <div id="dummyRecord" class="dummyRecord">
                <i class="fa fa-trash recordD" data-label="{data}" style="float: right; color: white; background: #116288; padding: 9px; border-radius: 5px;font-size: 14px; cursor: pointer;"></i>
                <div  style="font-weight: bold;margin: 30px 0;font-family: system-ui;">New Task {data}</div>
                <div class="form-group">  
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip01">Task Description <span style="color: red;">*</span></label>
                      <input type="text" class="form-control" id="validationTooltip01" placeholder=""  name="taskname{data}" required>
                    </div>
                   
                    <div class="col-md-6">
                      <label for="validationTooltip02">function<span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control" id="function{data}" data-label="{data}" onchange="handleChange(event);" name="function{data}" >
                          <option selected value=''>None</option>
                          <option value="Accounts">Accounts </option>
                          <option value="Compliance">Compliance</option>
                          <option value="Content">Content </option>
                          <option value="HR">HR</option>
                          <option value="IT_Support">IT Support</option>
                          <option value="Learning_Development">Learning & Development</option>
                          <option value="Operations">Operations</option>
                          <option value="Project">Project</option>
                          <option value="Self_Management">Self Management</option>
                          <option value="Beneficiary">Project - Beneficiary Engagement</option>
                          <option value="Internal">Internal - LLF</option>
                      </select>
                    </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                      <div class="col-md-6">
                           <label for="validationTooltip03">Task Type <span style="color: red;">*</span></label>
                            <select class="custom-select custom-select-sm form-control" data-label="{data}" readonly style="pointer-events:none" id="tasktype{data}" name="tasktype{data}">
                                <option value=''>None</option>
                            </select>
                      </div>
                      <div class="col-md-6">
                          <label for="validationTooltipUsername">Deadline Type</label>
                          <select class="custom-select custom-select-sm form-control deadline" id="deadline{data}" name="deadline{data}" >
                            <option selected>Select</option>
                            <option value="Deadlines">Deadlines</option>
                            <option value="Block Time">Block Time</option>
                          </select>
                    </div>
                  </div>
                </div>

                <div class="form-group"> 
                  <div class="row">
                  <div class="col-md-6">
                    <label for="validationTooltip03">Project <span style="color: red;">*</span></label>
                    <select class="custom-select custom-select-sm form-control" data-label="{data}" onchange="handleProject(event)" name="projectname{data}">
                      <option value="" >None</option>
                      <% if(projectList.length != 0) { %>
                       <% projectList.forEach((eachProject) => { %>
                       <option value="<%= eachProject.sfid %>" ><%= eachProject.name %></option>
                       <% }) %>
                      <% } %>
                   </select>
                  </div>
                  <div class="col-md-6">
                    <label for="validationTooltip04">Task Date</label>
                    <input type="text" class="form-control datepic datePicker"   id="datePicker{data}" required readonly name="taskdate{data}">
                    
                  </div>
                </div>
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Assign to Heroku user <span style="color: red;">*</span></label>
                      <select class="custom-select custom-select-sm form-control assignedresource" name="assignedresource{data}" id="assignedresource{data}">
                        <option value="">None</option>
                       </select>


                    </div>

                    <div class="col-md-6">
                        <label for="validationTooltipUsername">Status <span style="color: red;">*</span></label>
                        <select class="custom-select custom-select-sm form-control" name="status{data}" >
                             <option selected>None</option>
                             <option value="Started">Started</option>
                             <option value="On Hold">On Hold</option>
                             <option value="Completed">Completed</option>
                        </select>
                    </div>
                  </div>  
                </div>
                
                <div class="form-group">
                  <div class="row">
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned Start Time</label>
                      <input type="time" class="form-control plannedstarttimeTask" id="plannedstarttimeTask{data}" name="plannedstarttime{data}" required>
                    </div>
                    
                    <div class="col-md-6">
                      <label for="validationTooltip02">Planned End Time</label>
                      <input type="time" class="form-control plannedendtimeTask" id="plannedendtimeTask{data}" name="plannedendtime{data}" required>
                    </div>
                  </div>  
                </div>

                
            </div>


</div>

<table style="display:none;opacity:0;" >
    <tbody id="dummyTableBody" style="display:none;opacity:0;" >
        <tr data-label="{index}" >
            <td scope="row"><button type="button" id="addBtns{index}" data-value="{object}" onclick="handleTimeSheet(event)" data-label="{index}" class="btn btn-primary">Add Timesheets</button></td>
            <td> <input style="height: 14px; width: 14px;" type="checkbox" class="chckbox{dummy}" data-label="{recId}" id="Allcheckbox{index}" />   </td>
            <td>{projectname}</td>
            <td>{taskname}</td>
            <td> {taskdate} </td>
            <td>
             <div style="display: flex;align-items: center;" >
                <select id="taskSelect{index}" disabled class="form-control" style="width:auto" >  
                    <option value="" > None </option>
                    <option value="Started" > Started </option>
                    <option value="On hold" > On Hold </option>
                    <option value="Completed" > Completed </option>
                    <option value="Yet to Start" > Yet to Start </option>
                </select>
                <i class="fas fa-pencil-alt editIcon editIconId{index}" data-label="{index}" style="padding: 0 0 0 10px;cursor: pointer; color: #706e6b;"></i>
             </div>
            </td>
            <td>{function}</td>
            <td> {tasktype}</td>
            <td>{startTime}</td>
            <td>{endTime}</td>
            <td><div style="display: flex;align-items: center;" > <textarea class="form-control" disabled id="descp{index}" >{description} </textarea><i class="fas fa-pencil-alt editIconId{index} editIcon" data-label="{index}" style="padding: 0 0 0 10px;cursor: pointer; color: #706e6b;"></i>
             </div> </td>
             <td><div style="display: flex;align-items: center;" ><input class="form-control" type="time" disabled id="actualSt{index}" value="{AstartTime}" /><i class="fas fa-pencil-alt editIcon editIconId{index}" data-label="{index}" style="padding: 0 0 0 10px;cursor: pointer; color: #706e6b;"></i>
             </div> </td>
            <td><div style="display: flex;align-items: center;" ><input class="form-control" type="time" disabled id="actualEd{index}" value="{AendTime}" /><i class="fas fa-pencil-alt editIcon editIconId{index}" data-label="{index}" style="padding: 0 0 0 10px;cursor: pointer; color: #706e6b;"></i> </div></td>
            <td> {pHours} </td>
            <td>{aHours}</td>
            <td>{currentuser}</td>
        </tr>
        
    </tbody>

</table>



</body>
</html>








